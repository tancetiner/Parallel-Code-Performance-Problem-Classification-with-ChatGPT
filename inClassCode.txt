#include <stdio.h>
#include <omp.h>
static long num_steps = 10000000;
double step;

int main () {
  const int MAX_T = 8;
  int i, t;
  double x, pi;
  double start_time, run_time;

  step = 1.0/(double) num_steps;

  for(t = 1; t <= MAX_T; t++) {
    start_time = omp_get_wtime();
    omp_set_num_threads(t);
    pi = 0.0;
#pragma omp parallel
    {
      int i, nt;
      double x;

      i = omp_get_thread_num();
      nt = omp_get_num_threads();

      for (; i < num_steps; i += nt){
        x = (i + 0.5) * step;
#pragma omp critical //also  try atomic
        pi += 4.0/(1.0+x*x);
      }
    }

    pi = pi * step;

    run_time = omp_get_wtime() - start_time;
    printf("pi with %d threads: %.16lf in %lf seconds\n",t , pi,run_time);
  }
}