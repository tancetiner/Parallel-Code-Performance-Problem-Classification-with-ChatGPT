#ifndef CGAL_LINEAR_LEAST_SQUARES_FITTING_SPHERES_3_H #define CGAL_LINEAR_LEAST_SQUARES_FITTING_SPHERES_3_H #include <CGAL/basic.h> #include <CGAL/Object.h> #include <CGAL/centroid.h> #include <CGAL/eigen.h> #include <CGAL/PCA_util.h> #include <iterator> namespace CGAL { namespace internal { template < typename InputIterator, typename K > typename K::FT linear_least_squares_fitting_3(InputIterator first, InputIterator beyond, typename K::Plane_3& plane, typename K::Point_3& c, const typename K::Sphere_3*, const K& k, const CGAL::Dimension_tag<3>& tag) { typedef typename K::FT FT; typedef typename K::Sphere_3 Sphere; CGAL_precondition(first != beyond); c = centroid(first,beyond,K(),tag); FT covariance[6] = {0.0,0.0,0.0,0.0,0.0,0.0}; assemble_covariance_matrix_3(first,beyond,covariance,c,k,(Sphere*) NULL,tag); return fitting_plane_3(covariance,c,plane,k); } template < typename InputIterator, typename K > typename K::FT linear_least_squares_fitting_3(InputIterator first, InputIterator beyond, typename K::Plane_3& plane, typename K::Point_3& c, const typename K::Sphere_3*, const K& k, const CGAL::Dimension_tag<2>& tag) { typedef typename K::FT FT; typedef typename K::Sphere_3 Sphere; CGAL_precondition(first != beyond); c = centroid(first,beyond,K(),tag); FT covariance[6] = {0.0,0.0,0.0,0.0,0.0,0.0}; assemble_covariance_matrix_3(first,beyond,covariance,c,k,(Sphere*) NULL,tag); return fitting_plane_3(covariance,c,plane,k); } template < typename InputIterator, typename K > typename K::FT linear_least_squares_fitting_3(InputIterator first, InputIterator beyond, typename K::Line_3& line, typename K::Point_3& c, const typename K::Sphere_3*, const K& k, const CGAL::Dimension_tag<3>& tag) { typedef typename K::FT FT; typedef typename K::Sphere_3 Sphere; CGAL_precondition(first != beyond); c = centroid(first,beyond,K(),tag); FT covariance[6] = {0.0,0.0,0.0,0.0,0.0,0.0}; assemble_covariance_matrix_3(first,beyond,covariance,c,k,(Sphere*) NULL,tag); return fitting_line_3(covariance,c,line,k); } template < typename InputIterator, typename K > typename K::FT linear_least_squares_fitting_3(InputIterator first, InputIterator beyond, typename K::Line_3& line, typename K::Point_3& c, const typename K::Sphere_3*, const K& k, const CGAL::Dimension_tag<2>& tag) { typedef typename K::FT FT; typedef typename K::Sphere_3 Sphere; CGAL_precondition(first != beyond); c = centroid(first,beyond,K(),tag); FT covariance[6] = {0.0,0.0,0.0,0.0,0.0,0.0}; assemble_covariance_matrix_3(first,beyond,covariance,c,k,(Sphere*) NULL,tag); return fitting_line_3(covariance,c,line,k); } } } #endif