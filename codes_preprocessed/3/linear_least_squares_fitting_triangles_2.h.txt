#ifndef CGAL_LINEAR_LEAST_SQUARES_FITTING_TRIANGLES_2_H #define CGAL_LINEAR_LEAST_SQUARES_FITTING_TRIANGLES_2_H #include <CGAL/basic.h> #include <CGAL/Object.h> #include <CGAL/centroid.h> #include <CGAL/eigen_2.h> #include <CGAL/eigen.h> #include <CGAL/Linear_algebraCd.h> #include <CGAL/PCA_util.h> #include <iterator> #include <vector> #include <cmath> #include <list> namespace CGAL { namespace internal { template < typename InputIterator, typename Kernel > typename Kernel::FT linear_least_squares_fitting_2(InputIterator first, InputIterator beyond, typename Kernel::Line_2& line, typename Kernel::Point_2& c, const typename Kernel::Triangle_2*, const Kernel&, const CGAL::Dimension_tag<2>& tag) { typedef typename Kernel::FT FT; typedef typename Kernel::Line_2 Line; typedef typename Kernel::Vector_2 Vector; typedef typename Kernel::Triangle_2 Triangle; typedef typename CGAL::Linear_algebraCd<FT> LA; typedef typename LA::Matrix Matrix; CGAL_precondition(first != beyond); c = centroid(first,beyond,Kernel(),tag); FT mass = 0.0; FT covariance[3] = {0.0, 0.0, 0.0}; FT temp[4] = {1/12.0, 1/24.0, 1/24.0, 1/12.0}; Matrix moment = init_matrix<Kernel>(2,temp); for(InputIterator it = first; it != beyond; it++) { const Triangle& t = *it; FT x0 = t[0].x(); FT y0 = t[0].y(); FT delta[4] = {t[1].x() - x0, t[2].x() - x0, t[1].y() - y0, t[2].y() - y0}; Matrix transformation = init_matrix<Kernel>(2,delta); FT area = 0.5 * std::abs(LA::determinant(transformation)); CGAL_assertion(area!=0); transformation = 2 * area * transformation * moment * LA::transpose(transformation); FT xav0 = (delta[0]+delta[1])/3.0; FT yav0 = (delta[2]+delta[3])/3.0; covariance[0] += transformation[0][0] + area * (x0*xav0*2 + x0*x0); covariance[1] += transformation[0][1] + area * (x0*yav0 + xav0*y0 + x0*y0); covariance[2] += transformation[1][1] + area * (y0*yav0*2 + y0*y0); mass += area; } covariance[0] += mass * (-1.0 * c.x() * c.x()); covariance[1] += mass * (-1.0 * c.x() * c.y()); covariance[2] += mass * (-1.0 * c.y() * c.y()); std::pair<FT,FT> eigen_values; std::pair<Vector,Vector> eigen_vectors; FT eigen_vectors1[4]; FT eigen_values1[2]; eigen_symmetric<FT>(covariance,2, eigen_vectors1, eigen_values1); eigen_values = std::make_pair(eigen_values1[0],eigen_values1[1]); eigen_vectors = std::make_pair(Vector(eigen_vectors1[0],eigen_vectors1[1]),Vector(eigen_vectors1[2],eigen_vectors1[3])); if(eigen_values.first != eigen_values.second) { line = Line(c, eigen_vectors.first); return (FT)1.0 - eigen_values.second / eigen_values.first; } else { line = Line(c, Vector(1.0, 0.0)); return (FT)0.0; } } template < typename InputIterator, typename Kernel > typename Kernel::FT linear_least_squares_fitting_2(InputIterator first, InputIterator beyond, typename Kernel::Line_2& line, typename Kernel::Point_2& c, const typename Kernel::Triangle_2*, const Kernel&, const CGAL::Dimension_tag<1>& tag) { typedef typename Kernel::Triangle_2 Triangle; typedef typename Kernel::Segment_2 Segment; CGAL_precondition(first != beyond); std::list<Segment> segments; for(InputIterator it = first; it != beyond; it++) { const Triangle& t = *it; segments.push_back(Segment(t[0],t[1])); segments.push_back(Segment(t[1],t[2])); segments.push_back(Segment(t[2],t[0])); } return linear_least_squares_fitting_2(segments.begin(),segments.end(),line,c,tag,Kernel()); } template < typename InputIterator, typename Kernel > typename Kernel::FT linear_least_squares_fitting_2(InputIterator first, InputIterator beyond, typename Kernel::Line_2& line, typename Kernel::Point_2& c, const typename Kernel::Triangle_2*, const Kernel&, const CGAL::Dimension_tag<0>& tag) { typedef typename Kernel::Triangle_2 Triangle; typedef typename Kernel::Point_2 Point; CGAL_precondition(first != beyond); std::list<Point> points; for(InputIterator it = first; it != beyond; it++) { const Triangle& t = *it; points.push_back(Point(t[0])); points.push_back(Point(t[1])); points.push_back(Point(t[2])); } return linear_least_squares_fitting_2(points.begin(),points.end(),line,c,tag,Kernel()); } } } #endif