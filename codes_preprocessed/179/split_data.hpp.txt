#ifndef MLPACK_CORE_UTIL_SPLIT_DATA_HPP #define MLPACK_CORE_UTIL_SPLIT_DATA_HPP #include <mlpack/core.hpp> namespace mlpack { namespace data { template<typename T, typename U> void TrainTestSplit(const arma::Mat<T>& input, const arma::Row<U>& inputLabel, arma::Mat<T>& trainData, arma::Mat<T>& testData, arma::Row<U>& trainLabel, arma::Row<U>& testLabel, const double testRatio) { const size_t testSize = static_cast<size_t>(input.n_cols * testRatio); const size_t trainSize = input.n_cols - testSize; trainData.set_size(input.n_rows, trainSize); testData.set_size(input.n_rows, testSize); trainLabel.set_size(trainSize); testLabel.set_size(testSize); const arma::Col<size_t> order = arma::shuffle(arma::linspace<arma::Col<size_t>>(0, input.n_cols - 1, input.n_cols)); for (size_t i = 0; i != trainSize; ++i) { trainData.col(i) = input.col(order[i]); trainLabel(i) = inputLabel(order[i]); } for (size_t i = 0; i != testSize; ++i) { testData.col(i) = input.col(order[i + trainSize]); testLabel(i) = inputLabel(order[i + trainSize]); } } template<typename T,typename U> std::tuple<arma::Mat<T>, arma::Mat<T>, arma::Row<U>, arma::Row<U>> TrainTestSplit(const arma::Mat<T>& input, const arma::Row<U>& inputLabel, const double testRatio) { arma::Mat<T> trainData; arma::Mat<T> testData; arma::Row<U> trainLabel; arma::Row<U> testLabel; TrainTestSplit(input, inputLabel, trainData, testData, trainLabel, testLabel, testRatio); return std::make_tuple(trainData, testData, trainLabel, testLabel); } } } #endif