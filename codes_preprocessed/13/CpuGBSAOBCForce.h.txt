#ifndef OPENMM_CPU_GBSAOBC_FORCE_H__ #define OPENMM_CPU_GBSAOBC_FORCE_H__ #include "openmm/internal/ThreadPool.h" #include "openmm/internal/vectorize.h" #include <set> #include <utility> #include <vector> namespace OpenMM { class CpuGBSAOBCForce { public: class ComputeTask; CpuGBSAOBCForce(); void setUseCutoff(float distance); void setPeriodic(float* periodicBoxSize); void setSoluteDielectric(float dielectric); void setSolventDielectric(float dielectric); const std::vector<std::pair<float, float> >& getParticleParameters() const; void setParticleParameters(const std::vector<std::pair<float, float> >& params); void computeForce(const std::vector<float>& posq, std::vector<std::vector<float> >& threadForce, double* totalEnergy, ThreadPool& threads); void threadComputeForce(ThreadPool& threads, int threadIndex); private: bool cutoff; bool periodic; float periodicBoxSize[3]; float cutoffDistance, soluteDielectric, solventDielectric; std::vector<std::pair<float, float> > particleParams; std::vector<float> bornRadii; std::vector<std::vector<float> > threadBornForces; std::vector<float> obcChain; std::vector<double> threadEnergy; std::vector<float> logTable; float logDX, logDXInv; float const* posq; std::vector<std::vector<float> >* threadForce; bool includeEnergy; void* atomicCounter; static const int NUM_TABLE_POINTS; void getDeltaR(const fvec4& posI, const fvec4& x, const fvec4& y, const fvec4& z, fvec4& dx, fvec4& dy, fvec4& dz, fvec4& r2, bool periodic, const fvec4& boxSize, const fvec4& invBoxSize) const; fvec4 fastLog(fvec4 x); }; } #endif