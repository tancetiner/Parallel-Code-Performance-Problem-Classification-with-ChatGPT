#ifndef OPENMM_CPU_NEIGHBORLIST_H_ #define OPENMM_CPU_NEIGHBORLIST_H_ #include "windowsExportCpu.h" #include "openmm/internal/ThreadPool.h" #include <set> #include <utility> #include <vector> namespace OpenMM { class OPENMM_EXPORT_CPU CpuNeighborList { public: class ThreadTask; class Voxels; static const int BlockSize; CpuNeighborList(); void computeNeighborList(int numAtoms, const std::vector<float>& atomLocations, const std::vector<std::set<int> >& exclusions, const float* periodicBoxSize, bool usePeriodic, float maxDistance, ThreadPool& threads); int getNumBlocks() const; const std::vector<int>& getSortedAtoms() const; const std::vector<int>& getBlockNeighbors(int blockIndex) const; const std::vector<char>& getBlockExclusions(int blockIndex) const; void threadComputeNeighborList(ThreadPool& threads, int threadIndex); void runThread(int index); private: std::vector<int> sortedAtoms; std::vector<std::vector<int> > blockNeighbors; std::vector<std::vector<char> > blockExclusions; float minx, maxx, miny, maxy, minz, maxz; std::vector<std::pair<int, int> > atomBins; Voxels* voxels; const std::vector<std::set<int> >* exclusions; const float* atomLocations; const float* periodicBoxSize; int numAtoms; bool usePeriodic; float maxDistance; }; } #endif