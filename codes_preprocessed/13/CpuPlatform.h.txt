#ifndef OPENMM_CPUPLATFORM_H_ #define OPENMM_CPUPLATFORM_H_ #include "ReferencePlatform.h" #include "openmm/internal/ContextImpl.h" #include "openmm/internal/ThreadPool.h" #include "windowsExportCpu.h" #include <map> namespace OpenMM { class OPENMM_EXPORT_CPU CpuPlatform : public ReferencePlatform { public: class PlatformData; CpuPlatform(); const std::string& getName() const { static const std::string name = "CPU"; return name; } double getSpeed() const; bool supportsDoublePrecision() const; static bool isProcessorSupported(); void contextCreated(ContextImpl& context, const std::map<std::string, std::string>& properties) const; void contextDestroyed(ContextImpl& context) const; static PlatformData& getPlatformData(ContextImpl& context); private: static std::map<ContextImpl*, PlatformData*> contextData; }; class CpuPlatform::PlatformData { public: PlatformData(int numParticles); std::vector<float> posq; std::vector<std::vector<float> > threadForce; ThreadPool threads; bool isPeriodic; }; } #endif