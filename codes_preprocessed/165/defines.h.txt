#pragma once #ifdef __cplusplus #include <complex> namespace af { typedef std::complex<float> af_cfloat; typedef std::complex<double> af_cdouble; } #else typedef struct { float x; float y; } af_cfloat; typedef struct { double x; double y; } af_cdouble; #endif typedef enum { AF_SUCCESS=0, AF_ERR_INTERNAL, AF_ERR_NOMEM, AF_ERR_DRIVER, AF_ERR_RUNTIME, AF_ERR_INVALID_ARRAY, AF_ERR_ARG, AF_ERR_SIZE, AF_ERR_DIFF_TYPE, AF_ERR_NOT_SUPPORTED, AF_ERR_NOT_CONFIGURED, AF_ERR_INVALID_TYPE, AF_ERR_INVALID_ARG, AF_ERR_UNKNOWN } af_err; typedef enum { f32, c32, f64, c64, b8, s32, u32, u8, s8, u8x4, s8x4, } af_dtype; typedef enum { afDevice, afHost, } af_source; #if defined(_WIN32) || defined(_MSC_VER) #ifdef AFDLL #define AFAPI __declspec(dllexport) #else #define AFAPI __declspec(dllimport) #endif #ifndef __cplusplus #define bool unsigned char #define false 0 #define true 1 #endif #define __PRETTY_FUNCTION__ __FUNCSIG__ #define snprintf sprintf_s #define STATIC_ static #else #define AFAPI __attribute__((visibility("default"))) #include <stdbool.h> #define __PRETTY_FUNCTION__ __func__ #define STATIC_ #endif #include <cstddef> #define AF_MAX_DIMS 4 typedef size_t af_array; typedef long long dim_type; typedef enum { AF_INTERP_NEAREST, AF_INTERP_LINEAR, AF_INTERP_BILINEAR, AF_INTERP_CUBIC } af_interp_type; typedef enum { AF_ZERO = 0, AF_SYMMETRIC } af_pad_type; typedef enum { AF_CONNECTIVITY_4 = 0, AF_CONNECTIVITY_8 } af_connectivity_type;