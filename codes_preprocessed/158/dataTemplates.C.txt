#include "data.H" #include "Time.H" #include "solverPerformance.H" template<class Type> void Foam::data::setSolverPerformance ( const word& name, const SolverPerformance<Type>& sp ) const { dictionary& dict = const_cast<dictionary&>(solverPerformanceDict()); List<SolverPerformance<Type>> perfs; const label timeIndex = this->time().subCycling() ? this->time().prevTimeState().timeIndex() : this->time().timeIndex(); if (prevTimeIndex_ != timeIndex) { prevTimeIndex_ = timeIndex; dict.clear(); } else { dict.readIfPresent(name, perfs); } perfs.setSize(perfs.size()+1, sp); dict.set(name, perfs); } template<class Type> void Foam::data::setSolverPerformance ( const SolverPerformance<Type>& sp ) const { setSolverPerformance(sp.fieldName(), sp); }