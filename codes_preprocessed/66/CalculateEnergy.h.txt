#ifndef CALCULATEENERGY_H #define CALCULATEENERGY_H #include "BasicTypes.h" #include "EnergyTypes.h" #include "EwaldCached.h" #include "Ewald.h" #include "NoEwald.h" #include "CellList.h" #include <vector> class StaticVals; class System; class Forcefield; class Molecules; class MoleculeLookup; class MoleculeKind; class Coordinates; class COM; class XYZArray; class BoxDimensions; namespace cbmc { class TrialMol; } class CalculateEnergy { public: CalculateEnergy(StaticVals const& stat, System & sys); void Init(System & sys); SystemPotential SystemTotal() ; SystemPotential BoxInter(SystemPotential potential, XYZArray const& coords, XYZArray const& com, BoxDimensions const& boxAxes, const uint box) ; Virial ForceCalc(const uint box); SystemPotential SystemInter(SystemPotential potential, XYZArray const& coords, XYZArray const& com, BoxDimensions const& boxAxes) ; void MoleculeInter(Intermolecular &inter_LJ, Intermolecular &inter_coulomb, XYZArray const& molCoords, const uint molIndex, const uint box) const; void ParticleNonbonded(double* inter, const cbmc::TrialMol& trialMol, XYZArray const& trialPos, const uint partIndex, const uint box, const uint trials) const; void ParticleInter(double* en, double *real, XYZArray const& trialPos, const uint partIndex, const uint molIndex, const uint box, const uint trials) const; Intermolecular MoleculeTailChange(const uint box, const uint kind, const bool add) const; double* MoleculeIntra(const uint molIndex, const uint box) const; double IntraEnergy_1_3(const double distSq, const uint atom1, const uint atom2, const uint molIndex) const; double IntraEnergy_1_4(const double distSq, const uint atom1, const uint atom2, const uint molIndex) const; private: void EnergyCorrection(SystemPotential& pot, BoxDimensions const& boxAxes, const uint box) const; void ForceCorrection(Virial& virial, BoxDimensions const& boxAxes, const uint box) const; void BondVectors(XYZArray & vecs, MoleculeKind const& molKind, const uint molIndex, const uint box) const; void MolBond(double & energy, MoleculeKind const& molKind, XYZArray const& vecs, const uint box) const; void MolAngle(double & energy, MoleculeKind const& molKind, XYZArray const& vecs, const uint box) const; void MolDihedral(double & energy, MoleculeKind const& molKind, XYZArray const& vecs, const uint box) const; void MolNonbond(double & energy, MoleculeKind const& molKind, const uint molIndex, const uint box) const; void MolNonbond_1_4(double & energy, MoleculeKind const& molKind, const uint molIndex, const uint box) const; void MolNonbond_1_3(double & energy, MoleculeKind const& molKind, const uint molIndex, const uint box) const; bool SameMolecule(const uint p1, const uint p2) const { uint pair1 = particleMol[p1]; uint pair2 = particleMol[p2]; return (pair1 == pair2); } const Forcefield& forcefield; const Molecules& mols; const Coordinates& currentCoords; const MoleculeLookup& molLookup; const BoxDimensions& currentAxes; const COM& currentCOM; const EwaldCached *calcEwald; bool electrostatic, ewald; std::vector<int> particleKind; std::vector<int> particleMol; std::vector<double> particleCharge; const CellList& cellList; }; #endif