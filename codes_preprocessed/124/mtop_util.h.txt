#include "typedefs.h" #ifdef __cplusplus extern "C" { #endif void gmx_mtop_finalize(gmx_mtop_t *mtop); int ncg_mtop(const gmx_mtop_t *mtop); void gmx_mtop_atomnr_to_atom(const gmx_mtop_t *mtop,int atnr_global, t_atom **atom); void gmx_mtop_atomnr_to_ilist(const gmx_mtop_t *mtop,int atnr_global, t_ilist **ilist_mol,int *atnr_offset); void gmx_mtop_atomnr_to_molblock_ind(const gmx_mtop_t *mtop,int atnr_global, int *molb,int *molnr,int *atnr_mol); void gmx_mtop_atominfo_global(const gmx_mtop_t *mtop,int atnr_global, char **atomname,int *resnr,char **resname); typedef struct gmx_mtop_atomloop_all *gmx_mtop_atomloop_all_t; gmx_mtop_atomloop_all_t gmx_mtop_atomloop_all_init(const gmx_mtop_t *mtop); gmx_bool gmx_mtop_atomloop_all_next(gmx_mtop_atomloop_all_t aloop, int *at_global,t_atom **atom); void gmx_mtop_atomloop_all_names(gmx_mtop_atomloop_all_t aloop, char **atomname,int *resnr,char **resname); void gmx_mtop_atomloop_all_moltype(gmx_mtop_atomloop_all_t aloop, gmx_moltype_t **moltype,int *at_mol); typedef struct gmx_mtop_atomloop_block *gmx_mtop_atomloop_block_t; gmx_mtop_atomloop_block_t gmx_mtop_atomloop_block_init(const gmx_mtop_t *mtop); gmx_bool gmx_mtop_atomloop_block_next(gmx_mtop_atomloop_block_t aloop, t_atom **atom,int *nmol); typedef struct gmx_mtop_ilistloop *gmx_mtop_ilistloop_t; gmx_mtop_ilistloop_t gmx_mtop_ilistloop_init(const gmx_mtop_t *mtop); gmx_bool gmx_mtop_ilistloop_next(gmx_mtop_ilistloop_t iloop, t_ilist **ilist_mol,int *nmol); typedef struct gmx_mtop_ilistloop_all *gmx_mtop_ilistloop_all_t; gmx_mtop_ilistloop_all_t gmx_mtop_ilistloop_all_init(const gmx_mtop_t *mtop); gmx_bool gmx_mtop_ilistloop_all_next(gmx_mtop_ilistloop_all_t iloop, t_ilist **ilist_mol,int *atnr_offset); int gmx_mtop_ftype_count(const gmx_mtop_t *mtop,int ftype); t_block gmx_mtop_global_cgs(const gmx_mtop_t *mtop); t_atoms gmx_mtop_global_atoms(const gmx_mtop_t *mtop); void gmx_mtop_make_atomic_charge_groups(gmx_mtop_t *mtop,gmx_bool bKeepSingleMolCG); gmx_localtop_t * gmx_mtop_generate_local_top(const gmx_mtop_t *mtop,const t_inputrec *ir); t_topology gmx_mtop_t_to_t_topology(gmx_mtop_t *mtop); #ifdef __cplusplus } #endif