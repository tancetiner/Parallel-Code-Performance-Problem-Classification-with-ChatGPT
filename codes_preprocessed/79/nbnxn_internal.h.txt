#ifndef _nbnxn_internal_h #define _nbnxn_internal_h #include "typedefs.h" #include "domdec.h" #include "gmx_cyclecounter.h" #ifdef __cplusplus extern "C" { #endif #ifdef GMX_X86_SSE2 #define NBNXN_SEARCH_BB_SSE #endif #ifdef GMX_NBNXN_SIMD #define NBNXN_MEM_ALIGN (GMX_NBNXN_SIMD_BITWIDTH/8) #else #define NBNXN_MEM_ALIGN 32 #endif typedef struct { rvec c0; rvec c1; real atom_density; gmx_bool bSimple; int na_c; int na_cj; int na_sc; int na_c_2log; int ncx; int ncy; int nc; real sx; real sy; real inv_sx; real inv_sy; int cell0; int *cxy_na; int *cxy_ind; int cxy_nalloc; int *nsubc; float *bbcz; float *bb; float *bbj; int *flags; int nc_nalloc; float *bbcz_simple; float *bb_simple; int *flags_simple; int nc_nalloc_simple; int nsubc_tot; } nbnxn_grid_t; #ifdef GMX_NBNXN_SIMD #if GMX_NBNXN_SIMD_BITWIDTH == 128 #define GMX_MM128_HERE #else #if GMX_NBNXN_SIMD_BITWIDTH == 256 #define GMX_MM256_HERE #else #error "unsupported GMX_NBNXN_SIMD_BITWIDTH" #endif #endif #include "gmx_simd_macros.h" typedef struct nbnxn_x_ci_simd_4xn { gmx_mm_pr ix_SSE0, iy_SSE0, iz_SSE0; gmx_mm_pr ix_SSE1, iy_SSE1, iz_SSE1; gmx_mm_pr ix_SSE2, iy_SSE2, iz_SSE2; gmx_mm_pr ix_SSE3, iy_SSE3, iz_SSE3; } nbnxn_x_ci_simd_4xn_t; typedef struct nbnxn_x_ci_simd_2xnn { gmx_mm_pr ix_SSE0, iy_SSE0, iz_SSE0; gmx_mm_pr ix_SSE2, iy_SSE2, iz_SSE2; } nbnxn_x_ci_simd_2xnn_t; #endif typedef struct nbnxn_list_work { gmx_cache_protect_t cp0; float *bb_ci; real *x_ci; #ifdef GMX_NBNXN_SIMD nbnxn_x_ci_simd_4xn_t *x_ci_simd_4xn; nbnxn_x_ci_simd_2xnn_t *x_ci_simd_2xnn; #endif int cj_ind; int cj4_init; float *d2; nbnxn_cj_t *cj; int cj_nalloc; int ncj_noq; int ncj_hlj; gmx_cache_protect_t cp1; } nbnxn_list_work_t; typedef void gmx_icell_set_x_t (int ci, real shx, real shy, real shz, int na_c, int stride, const real *x, nbnxn_list_work_t *work); static gmx_icell_set_x_t icell_set_x_simple; #ifdef GMX_NBNXN_SIMD static gmx_icell_set_x_t icell_set_x_simple_simd_4xn; static gmx_icell_set_x_t icell_set_x_simple_simd_2xnn; #endif static gmx_icell_set_x_t icell_set_x_supersub; #ifdef NBNXN_SEARCH_SSE static gmx_icell_set_x_t icell_set_x_supersub_sse8; #endif #undef GMX_MM128_HERE #undef GMX_MM256_HERE typedef struct { int count; gmx_cycles_t c; gmx_cycles_t start; } nbnxn_cycle_t; enum { enbsCCgrid, enbsCCsearch, enbsCCcombine, enbsCCreducef, enbsCCnr }; typedef struct { gmx_cache_protect_t cp0; int *cxy_na; int cxy_na_nalloc; int *sort_work; int sort_work_nalloc; nbnxn_buffer_flags_t buffer_flags; int ndistc; nbnxn_cycle_t cc[enbsCCnr]; gmx_cache_protect_t cp1; } nbnxn_search_work_t; typedef struct nbnxn_search { int ePBC; matrix box; gmx_bool DomDec; ivec dd_dim; gmx_domdec_zones_t *zones; int ngrid; nbnxn_grid_t *grid; int *cell; int cell_nalloc; int *a; int a_nalloc; int natoms_local; int natoms_nonlocal; gmx_bool print_cycles; int search_count; nbnxn_cycle_t cc[enbsCCnr]; gmx_icell_set_x_t *icell_set_x; int nthread_max; nbnxn_search_work_t *work; } nbnxn_search_t_t; static void nbs_cycle_start(nbnxn_cycle_t *cc) { cc->start = gmx_cycles_read(); } static void nbs_cycle_stop(nbnxn_cycle_t *cc) { cc->c += gmx_cycles_read() - cc->start; cc->count++; } #ifdef __cplusplus } #endif #endif