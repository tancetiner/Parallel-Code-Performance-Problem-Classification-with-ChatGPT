#ifndef MLPACK_METHODS_NEIGHBOR_SEARCH_NEIGHBOR_SEARCH_IMPL_HPP #define MLPACK_METHODS_NEIGHBOR_SEARCH_NEIGHBOR_SEARCH_IMPL_HPP #include <mlpack/core.hpp> #include "neighbor_search_rules.hpp" namespace mlpack { namespace neighbor { template<typename MatType, typename TreeType> TreeType* BuildTree( const MatType& dataset, std::vector<size_t>& oldFromNew, typename boost::enable_if_c< tree::TreeTraits<TreeType>::RearrangesDataset == true, TreeType* >::type = 0) { return new TreeType(dataset, oldFromNew); } template<typename MatType, typename TreeType> TreeType* BuildTree( const MatType& dataset, const std::vector<size_t>& , const typename boost::enable_if_c< tree::TreeTraits<TreeType>::RearrangesDataset == false, TreeType* >::type = 0) { return new TreeType(dataset); } template<typename MatType, typename TreeType> TreeType* BuildTree( MatType&& dataset, std::vector<size_t>& oldFromNew, typename boost::enable_if_c< tree::TreeTraits<TreeType>::RearrangesDataset == true, TreeType* >::type = 0) { return new TreeType(std::move(dataset), oldFromNew); } template<typename MatType, typename TreeType> TreeType* BuildTree( MatType&& dataset, std::vector<size_t>& , typename boost::enable_if_c< tree::TreeTraits<TreeType>::RearrangesDataset == false, TreeType* >::type = 0) { return new TreeType(std::move(dataset)); } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: NeighborSearch(const MatType& referenceSetIn, const bool naive, const bool singleMode, const double epsilon, const MetricType metric) : referenceTree(naive ? NULL : BuildTree<MatType, Tree>(referenceSetIn, oldFromNewReferences)), referenceSet(naive ? &referenceSetIn : &referenceTree->Dataset()), treeOwner(!naive), setOwner(false), naive(naive), singleMode(!naive && singleMode), epsilon(epsilon), metric(metric), baseCases(0), scores(0), treeNeedsReset(false) { if (epsilon < 0) throw std::invalid_argument("epsilon must be non-negative"); } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: NeighborSearch(MatType&& referenceSetIn, const bool naive, const bool singleMode, const double epsilon, const MetricType metric) : referenceTree(naive ? NULL : BuildTree<MatType, Tree>(std::move(referenceSetIn), oldFromNewReferences)), referenceSet(naive ? new MatType(std::move(referenceSetIn)) : &referenceTree->Dataset()), treeOwner(!naive), setOwner(naive), naive(naive), singleMode(!naive && singleMode), epsilon(epsilon), metric(metric), baseCases(0), scores(0), treeNeedsReset(false) { if (epsilon < 0) throw std::invalid_argument("epsilon must be non-negative"); } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: NeighborSearch(Tree* referenceTree, const bool singleMode, const double epsilon, const MetricType metric) : referenceTree(referenceTree), referenceSet(&referenceTree->Dataset()), treeOwner(false), setOwner(false), naive(false), singleMode(singleMode), epsilon(epsilon), metric(metric), baseCases(0), scores(0), treeNeedsReset(false) { if (epsilon < 0) throw std::invalid_argument("epsilon must be non-negative"); } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: NeighborSearch(const bool naive, const bool singleMode, const double epsilon, const MetricType metric) : referenceTree(NULL), referenceSet(new MatType()), treeOwner(false), setOwner(true), naive(naive), singleMode(singleMode), epsilon(epsilon), metric(metric), baseCases(0), scores(0), treeNeedsReset(false) { if (epsilon < 0) throw std::invalid_argument("epsilon must be non-negative"); if (!naive) { referenceTree = BuildTree<MatType, Tree>(*referenceSet, oldFromNewReferences); treeOwner = true; } } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: ~NeighborSearch() { if (treeOwner && referenceTree) delete referenceTree; if (setOwner && referenceSet) delete referenceSet; } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> void NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: Train(const MatType& referenceSet) { if (treeOwner && referenceTree) delete referenceTree; if (!naive) { referenceTree = BuildTree<MatType, Tree>(referenceSet, oldFromNewReferences); treeOwner = true; } else { treeOwner = false; } if (setOwner && this->referenceSet) delete this->referenceSet; if (!naive) this->referenceSet = &referenceTree->Dataset(); else this->referenceSet = &referenceSet; setOwner = false; } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> void NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: Train(MatType&& referenceSetIn) { if (treeOwner && referenceTree) delete referenceTree; if (!naive) { referenceTree = BuildTree<MatType, Tree>(std::move(referenceSetIn), oldFromNewReferences); treeOwner = true; } else { treeOwner = false; } if (setOwner && referenceSet) delete referenceSet; if (!naive) { referenceSet = &referenceTree->Dataset(); setOwner = false; } else { referenceSet = new MatType(std::move(referenceSetIn)); setOwner = true; } } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> void NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: Train(Tree* referenceTree) { if (naive) throw std::invalid_argument("cannot train on given reference tree when " "naive search (without trees) is desired"); if (treeOwner && referenceTree) delete this->referenceTree; if (setOwner && referenceSet) delete this->referenceSet; this->referenceTree = referenceTree; this->referenceSet = &referenceTree->Dataset(); treeOwner = false; setOwner = false; } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> void NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: Search(const MatType& querySet, const size_t k, arma::Mat<size_t>& neighbors, arma::mat& distances) { if (k > referenceSet->n_cols) { std::stringstream ss; ss << "requested value of k (" << k << ") is greater than the number of " << "points in the reference set (" << referenceSet->n_cols << ")"; throw std::invalid_argument(ss.str()); } Timer::Start("computing_neighbors"); baseCases = 0; scores = 0; std::vector<size_t> oldFromNewQueries; arma::Mat<size_t>* neighborPtr = &neighbors; arma::mat* distancePtr = &distances; if (tree::TreeTraits<Tree>::RearrangesDataset) { if (!singleMode && !naive) { distancePtr = new arma::mat; neighborPtr = new arma::Mat<size_t>; } else if (treeOwner) neighborPtr = new arma::Mat<size_t>; } neighborPtr->set_size(k, querySet.n_cols); neighborPtr->fill(size_t() - 1); distancePtr->set_size(k, querySet.n_cols); distancePtr->fill(SortPolicy::WorstDistance()); typedef NeighborSearchRules<SortPolicy, MetricType, Tree> RuleType; if (naive) { RuleType rules(*referenceSet, querySet, *neighborPtr, *distancePtr, metric, epsilon); for (size_t i = 0; i < querySet.n_cols; ++i) for (size_t j = 0; j < referenceSet->n_cols; ++j) rules.BaseCase(i, j); baseCases += querySet.n_cols * referenceSet->n_cols; } else if (singleMode) { RuleType rules(*referenceSet, querySet, *neighborPtr, *distancePtr, metric, epsilon); typename Tree::template SingleTreeTraverser<RuleType> traverser(rules); for (size_t i = 0; i < querySet.n_cols; ++i) traverser.Traverse(i, *referenceTree); scores += rules.Scores(); baseCases += rules.BaseCases(); Log::Info << rules.Scores() << " node combinations were scored.\n"; Log::Info << rules.BaseCases() << " base cases were calculated.\n"; } else { Timer::Stop("computing_neighbors"); Timer::Start("tree_building"); Tree* queryTree = BuildTree<MatType, Tree>(querySet, oldFromNewQueries); Timer::Stop("tree_building"); Timer::Start("computing_neighbors"); RuleType rules(*referenceSet, queryTree->Dataset(), *neighborPtr, *distancePtr, metric, epsilon); TraversalType<RuleType> traverser(rules); traverser.Traverse(*queryTree, *referenceTree); scores += rules.Scores(); baseCases += rules.BaseCases(); Log::Info << rules.Scores() << " node combinations were scored.\n"; Log::Info << rules.BaseCases() << " base cases were calculated.\n"; delete queryTree; } Timer::Stop("computing_neighbors"); if (tree::TreeTraits<Tree>::RearrangesDataset) { if (!singleMode && !naive && treeOwner) { neighbors.set_size(k, querySet.n_cols); distances.set_size(k, querySet.n_cols); for (size_t i = 0; i < distances.n_cols; i++) { distances.col(oldFromNewQueries[i]) = distancePtr->col(i); for (size_t j = 0; j < distances.n_rows; j++) { neighbors(j, oldFromNewQueries[i]) = oldFromNewReferences[(*neighborPtr)(j, i)]; } } delete neighborPtr; delete distancePtr; } else if (!singleMode && !naive) { neighbors.set_size(k, querySet.n_cols); distances.set_size(k, querySet.n_cols); for (size_t i = 0; i < distances.n_cols; ++i) { const size_t queryMapping = oldFromNewQueries[i]; distances.col(queryMapping) = distancePtr->col(i); neighbors.col(queryMapping) = neighborPtr->col(i); } delete neighborPtr; delete distancePtr; } else if (treeOwner) { neighbors.set_size(k, querySet.n_cols); for (size_t i = 0; i < neighbors.n_cols; i++) for (size_t j = 0; j < neighbors.n_rows; j++) neighbors(j, i) = oldFromNewReferences[(*neighborPtr)(j, i)]; delete neighborPtr; } } } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> void NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: Search(Tree* queryTree, const size_t k, arma::Mat<size_t>& neighbors, arma::mat& distances) { if (k > referenceSet->n_cols) { std::stringstream ss; ss << "requested value of k (" << k << ") is greater than the number of " << "points in the reference set (" << referenceSet->n_cols << ")"; throw std::invalid_argument(ss.str()); } if (singleMode || naive) throw std::invalid_argument("cannot call NeighborSearch::Search() with a " "query tree when naive or singleMode are set to true"); Timer::Start("computing_neighbors"); baseCases = 0; scores = 0; const MatType& querySet = queryTree->Dataset(); arma::Mat<size_t>* neighborPtr = &neighbors; if (treeOwner && tree::TreeTraits<Tree>::RearrangesDataset) neighborPtr = new arma::Mat<size_t>; neighborPtr->set_size(k, querySet.n_cols); neighborPtr->fill(size_t() - 1); distances.set_size(k, querySet.n_cols); distances.fill(SortPolicy::WorstDistance()); typedef NeighborSearchRules<SortPolicy, MetricType, Tree> RuleType; RuleType rules(*referenceSet, querySet, *neighborPtr, distances, metric, epsilon); TraversalType<RuleType> traverser(rules); traverser.Traverse(*queryTree, *referenceTree); scores += rules.Scores(); baseCases += rules.BaseCases(); Timer::Stop("computing_neighbors"); if (treeOwner && tree::TreeTraits<Tree>::RearrangesDataset) { neighbors.set_size(k, querySet.n_cols); for (size_t i = 0; i < neighbors.n_cols; i++) for (size_t j = 0; j < neighbors.n_rows; j++) neighbors(j, i) = oldFromNewReferences[(*neighborPtr)(j, i)]; delete neighborPtr; } } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> void NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: Search(const size_t k, arma::Mat<size_t>& neighbors, arma::mat& distances) { if (k > referenceSet->n_cols) { std::stringstream ss; ss << "requested value of k (" << k << ") is greater than the number of " << "points in the reference set (" << referenceSet->n_cols << ")"; throw std::invalid_argument(ss.str()); } Timer::Start("computing_neighbors"); baseCases = 0; scores = 0; arma::Mat<size_t>* neighborPtr = &neighbors; arma::mat* distancePtr = &distances; if (tree::TreeTraits<Tree>::RearrangesDataset && treeOwner) { distancePtr = new arma::mat; neighborPtr = new arma::Mat<size_t>; } neighborPtr->set_size(k, referenceSet->n_cols); neighborPtr->fill(size_t() - 1); distancePtr->set_size(k, referenceSet->n_cols); distancePtr->fill(SortPolicy::WorstDistance()); typedef NeighborSearchRules<SortPolicy, MetricType, Tree> RuleType; RuleType rules(*referenceSet, *referenceSet, *neighborPtr, *distancePtr, metric, epsilon, true ); if (naive) { for (size_t i = 0; i < referenceSet->n_cols; ++i) for (size_t j = 0; j < referenceSet->n_cols; ++j) rules.BaseCase(i, j); baseCases += referenceSet->n_cols * referenceSet->n_cols; } else if (singleMode) { typename Tree::template SingleTreeTraverser<RuleType> traverser(rules); for (size_t i = 0; i < referenceSet->n_cols; ++i) traverser.Traverse(i, *referenceTree); scores += rules.Scores(); baseCases += rules.BaseCases(); Log::Info << rules.Scores() << " node combinations were scored.\n"; Log::Info << rules.BaseCases() << " base cases were calculated.\n"; } else { if (treeNeedsReset) { std::stack<Tree*> nodes; nodes.push(referenceTree); while (!nodes.empty()) { Tree* node = nodes.top(); nodes.pop(); node->Stat().Reset(); for (size_t i = 0; i < node->NumChildren(); ++i) nodes.push(&node->Child(i)); } } TraversalType<RuleType> traverser(rules); traverser.Traverse(*referenceTree, *referenceTree); scores += rules.Scores(); baseCases += rules.BaseCases(); Log::Info << rules.Scores() << " node combinations were scored.\n"; Log::Info << rules.BaseCases() << " base cases were calculated.\n"; treeNeedsReset = true; } Timer::Stop("computing_neighbors"); if (treeOwner && tree::TreeTraits<Tree>::RearrangesDataset) { neighbors.set_size(k, referenceSet->n_cols); distances.set_size(k, referenceSet->n_cols); for (size_t i = 0; i < distances.n_cols; ++i) { const size_t refMapping = oldFromNewReferences[i]; distances.col(refMapping) = distancePtr->col(i); for (size_t j = 0; j < distances.n_rows; ++j) neighbors(j, refMapping) = oldFromNewReferences[(*neighborPtr)(j, i)]; } delete neighborPtr; delete distancePtr; } } template<typename SortPolicy, typename MetricType, typename MatType, template<typename TreeMetricType, typename TreeStatType, typename TreeMatType> class TreeType, template<typename> class TraversalType> template<typename Archive> void NeighborSearch<SortPolicy, MetricType, MatType, TreeType, TraversalType>:: Serialize(Archive& ar, const unsigned int ) { using data::CreateNVP; ar & CreateNVP(naive, "naive"); ar & CreateNVP(singleMode, "singleMode"); ar & CreateNVP(treeNeedsReset, "treeNeedsReset"); if (naive) { if (Archive::is_loading::value) { if (setOwner && referenceSet) delete referenceSet; setOwner = true; } ar & CreateNVP(referenceSet, "referenceSet"); ar & CreateNVP(metric, "metric"); if (Archive::is_loading::value) { if (treeOwner && referenceTree) delete referenceTree; referenceTree = NULL; oldFromNewReferences.clear(); treeOwner = false; } } else { if (Archive::is_loading::value) { if (treeOwner && referenceTree) delete referenceTree; treeOwner = true; } ar & CreateNVP(referenceTree, "referenceTree"); ar & CreateNVP(oldFromNewReferences, "oldFromNewReferences"); if (Archive::is_loading::value) { if (setOwner && referenceSet) delete referenceSet; referenceSet = &referenceTree->Dataset(); metric = referenceTree->Metric(); setOwner = false; } } if (Archive::is_loading::value) { baseCases = 0; scores = 0; } } } } #endif