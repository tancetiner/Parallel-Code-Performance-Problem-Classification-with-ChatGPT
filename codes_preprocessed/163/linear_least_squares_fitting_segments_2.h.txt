#ifndef CGAL_LINEAR_LEAST_SQUARES_FITTING_SEGMENTS_2_H #define CGAL_LINEAR_LEAST_SQUARES_FITTING_SEGMENTS_2_H #include <CGAL/basic.h> #include <CGAL/Object.h> #include <CGAL/centroid.h> #include <CGAL/eigen_2.h> #include <CGAL/eigen.h> #include <CGAL/Linear_algebraCd.h> #include <CGAL/PCA_util.h> #include <iterator> #include <vector> #include <cmath> namespace CGAL { namespace internal { template < typename InputIterator, typename K > typename K::FT linear_least_squares_fitting_2(InputIterator first, InputIterator beyond, typename K::Line_2& line, typename K::Point_2& c, const typename K::Segment_2*, const K&, const CGAL::Dimension_tag<1>& tag = CGAL::Dimension_tag<1>()) { typedef typename K::FT FT; typedef typename K::Line_2 Line; typedef typename K::Vector_2 Vector; typedef typename K::Segment_2 Segment; typedef typename CGAL::Linear_algebraCd<FT> LA; typedef typename LA::Matrix Matrix; CGAL_precondition(first != beyond); c = centroid(first,beyond,K(),tag); FT mass = 0.0; FT covariance[3] = {0.0,0.0,0.0}; FT temp[4] = {1.0, 0.5, 0.5, 1.0}; Matrix moment = (1.0/3.0) * init_matrix<K>(2,temp); for(InputIterator it = first; it != beyond; it++) { const Segment& t = *it; FT delta[4] = {t[0].x(), t[1].x(), t[0].y(), t[1].y()}; Matrix transformation = init_matrix<K>(2,delta); FT length = std::sqrt(t.squared_length()); CGAL_assertion(length != 0.0); transformation = length * transformation * moment * LA::transpose(transformation); covariance[0] += transformation[0][0]; covariance[1] += transformation[0][1]; covariance[2] += transformation[1][1]; mass += length; } covariance[0] += mass * (-1.0 * c.x() * c.x()); covariance[1] += mass * (-1.0 * c.x() * c.y()); covariance[2] += mass * (-1.0 * c.y() * c.y()); std::pair<FT,FT> eigen_values; std::pair<Vector,Vector> eigen_vectors; FT eigen_vectors1[4]; FT eigen_values1[2]; eigen_symmetric<FT>(covariance,2, eigen_vectors1, eigen_values1); eigen_values = std::make_pair(eigen_values1[0],eigen_values1[1]); eigen_vectors = std::make_pair(Vector(eigen_vectors1[0],eigen_vectors1[1]),Vector(eigen_vectors1[2],eigen_vectors1[3])); if(eigen_values.first != eigen_values.second) { line = Line(c, eigen_vectors.first); return (FT)1.0 - eigen_values.second / eigen_values.first; } else { line = Line(c, Vector(1.0, 0.0)); return (FT)0.0; } } template < typename InputIterator, typename K > typename K::FT linear_least_squares_fitting_2(InputIterator first, InputIterator beyond, typename K::Line_2& line, typename K::Point_2& c, const typename K::Segment_2*, const K& k, const CGAL::Dimension_tag<0>& tag) { typedef typename K::Point_2 Point; typedef typename K::Segment_2 Segment; CGAL_precondition(first != beyond); std::list<Point> points; for(InputIterator it = first; it != beyond; it++) { const Segment& s = *it; points.push_back(s[0]); points.push_back(s[1]); } return linear_least_squares_fitting_2(points.begin(),points.end(),line,c,k,(Point*)NULL,tag); } } } #endif