#include <stdlib.h> #include <assert.h> #include "Common.h" #include "Mem.h" #include "Matrix.h" #include "DiagScale.h" #include "PrunedRows.h" PrunedRows *PrunedRowsCreate(Matrix *mat, int size, DiagScale *diag_scale, double thresh) { int row, len, *ind, count, j, *data; double *val, temp; PrunedRows *p = (PrunedRows *) malloc(sizeof(PrunedRows)); p->mem = MemCreate(); p->size = MAX(size, mat->end_row - mat->beg_row + 1); p->len = (int *) malloc(p->size * sizeof(int)); p->ind = (int **) malloc(p->size * sizeof(int *)); for (row=0; row<=mat->end_row - mat->beg_row; row++) { MatrixGetRow(mat, row, &len, &ind, &val); count = 1; for (j=0; j<len; j++) { temp = DiagScaleGet(diag_scale, row); if (temp*ABS(val[j])*DiagScaleGet(diag_scale, ind[j]) >= thresh && ind[j] != row) count++; } p->ind[row] = (int *) MemAlloc(p->mem, count*sizeof(int)); p->len[row] = count; data = p->ind[row]; *data++ = row; for (j=0; j<len; j++) { temp = DiagScaleGet(diag_scale, row); if (temp*ABS(val[j])*DiagScaleGet(diag_scale, ind[j]) >= thresh && ind[j] != row) *data++ = ind[j]; } } return p; } void PrunedRowsDestroy(PrunedRows *p) { MemDestroy(p->mem); free(p->len); free(p->ind); free(p); } int *PrunedRowsAlloc(PrunedRows *p, int len) { return (int *) MemAlloc(p->mem, len*sizeof(int)); } void PrunedRowsPut(PrunedRows *p, int index, int len, int *ind) { if (index >= p->size) { p->size = index + 1000; p->len = (int *) realloc(p->len, p->size * sizeof(int)); p->ind = (int **) realloc(p->ind, p->size * sizeof(int *)); } p->len[index] = len; p->ind[index] = ind; } void PrunedRowsGet(PrunedRows *p, int index, int *lenp, int **indp) { *lenp = p->len[index]; *indp = p->ind[index]; }