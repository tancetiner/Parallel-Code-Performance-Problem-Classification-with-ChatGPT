#include <stdlib.h> #include <assert.h> #include "Common.h" #include "Mem.h" #include "Matrix.h" #include "StoredRows.h" StoredRows *StoredRowsCreate(Matrix *mat, int size) { StoredRows *p = (StoredRows *) malloc(sizeof(StoredRows)); p->mat = mat; p->mem = MemCreate(); p->size = size; p->num_loc = mat->end_row - mat->beg_row + 1; p->len = (int *) calloc(size, sizeof(int)); p->ind = (int **) malloc(size * sizeof(int *)); p->val = (double **) malloc(size * sizeof(double *)); p->count = 0; return p; } void StoredRowsDestroy(StoredRows *p) { MemDestroy(p->mem); free(p->len); free(p->ind); free(p->val); free(p); } int *StoredRowsAllocInd(StoredRows *p, int len) { return (int *) MemAlloc(p->mem, len*sizeof(int)); } double *StoredRowsAllocVal(StoredRows *p, int len) { return (double *) MemAlloc(p->mem, len*sizeof(double)); } void StoredRowsPut(StoredRows *p, int index, int len, int *ind, double *val) { int i = index - p->num_loc; if (i >= p->size) { int j; int newsize; newsize = i+1000; p->len = (int *) realloc(p->len, newsize * sizeof(int)); p->ind = (int **) realloc(p->ind, newsize * sizeof(int *)); p->val = (double **) realloc(p->val, newsize * sizeof(double *)); for (j=p->size; j<newsize; j++) p->len[j] = 0; p->size = newsize; } assert(p->len[i] == 0); p->len[i] = len; p->ind[i] = ind; p->val[i] = val; p->count++; } void StoredRowsGet(StoredRows *p, int index, int *lenp, int **indp, double **valp) { if (index < p->num_loc) { MatrixGetRow(p->mat, index, lenp, indp, valp); } else { index = index - p->num_loc; *lenp = p->len[index]; *indp = p->ind[index]; *valp = p->val[index]; } }