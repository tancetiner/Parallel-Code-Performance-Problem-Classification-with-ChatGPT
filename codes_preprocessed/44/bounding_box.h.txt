#ifndef LIBMESH_BOUNDING_BOX_H #define LIBMESH_BOUNDING_BOX_H #include "libmesh/libmesh.h" #include "libmesh/point.h" #include <vector> #include <set> #include <limits> namespace libMesh { class BoundingBox : public std::pair<Point, Point> { public: BoundingBox (const Point & new_min, const Point & new_max) : std::pair<Point, Point>(new_min, new_max) {} BoundingBox (const std::pair<Point, Point> & bbox) : std::pair<Point, Point> (bbox) {} BoundingBox () { this->invalidate(); } void invalidate () { for (unsigned int i=0; i<LIBMESH_DIM; i++) { this->first(i) = std::numeric_limits<Real>::max(); this->second(i) = -std::numeric_limits<Real>::max(); } } const Point & min() const { return this->first; } Point & min() { return this->first; } const Point & max() const { return this->second; } Point & max() { return this->second; } bool intersects (const BoundingBox &) const; bool intersects (const BoundingBox &, Real abstol) const; bool contains_point (const Point &) const; void intersect_with (const BoundingBox &); void union_with (const Point & p); void union_with (const BoundingBox &); Real signed_distance(const Point & p) const; }; inline void BoundingBox::union_with(const Point & p) { for (unsigned int i=0; i<LIBMESH_DIM; i++) { min()(i) = std::min(min()(i), p(i)); max()(i) = std::max(max()(i), p(i)); } } } #endif