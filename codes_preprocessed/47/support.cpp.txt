#include "gmxpre.h" #include "support.h" #include "config.h" #include <cstdio> #include <cstdlib> #include <map> #include <string> #include "gromacs/hardware/cpuinfo.h" namespace gmx { const std::string & simdString(SimdType s) { static const std::map<SimdType, std::string> name = { { SimdType::None, "None" }, { SimdType::Reference, "Reference" }, { SimdType::Generic, "Generic" }, { SimdType::X86_Sse2, "SSE2" }, { SimdType::X86_Sse4_1, "SSE4.1" }, { SimdType::X86_Avx128Fma, "AVX_128_FMA" }, { SimdType::X86_Avx, "AVX_256" }, { SimdType::X86_Avx2, "AVX2_256" }, { SimdType::X86_Avx512, "AVX_512" }, { SimdType::X86_Avx512Knl, "AVX_512_KNL" }, { SimdType::X86_Mic, "X86_MIC" }, { SimdType::Arm_Neon, "ARM_NEON" }, { SimdType::Arm_NeonAsimd, "ARM_NEON_ASIMD" }, { SimdType::Ibm_Qpx, "IBM_QPX" }, { SimdType::Ibm_Vmx, "IBM_VMX" }, { SimdType::Ibm_Vsx, "IBM_VSX" }, { SimdType::Fujitsu_HpcAce, "Fujitsu HPC-ACE" } }; return name.at(s); } SimdType simdSuggested(const CpuInfo &c) { SimdType suggested = SimdType::None; if (c.supportLevel() >= CpuInfo::SupportLevel::Features) { switch (c.vendor()) { case CpuInfo::Vendor::Intel: if (c.feature(CpuInfo::Feature::X86_Avx512ER)) { suggested = SimdType::X86_Avx512Knl; } else if (c.feature(CpuInfo::Feature::X86_Avx512F)) { suggested = SimdType::X86_Avx512; } else if (c.feature(CpuInfo::Feature::X86_Avx2)) { suggested = SimdType::X86_Avx2; } else if (c.feature(CpuInfo::Feature::X86_Avx)) { suggested = SimdType::X86_Avx; } else if (c.feature(CpuInfo::Feature::X86_Sse4_1)) { suggested = SimdType::X86_Sse4_1; } else if (c.feature(CpuInfo::Feature::X86_Sse2)) { suggested = SimdType::X86_Sse2; } break; case CpuInfo::Vendor::Amd: if (c.feature(CpuInfo::Feature::X86_Avx2)) { suggested = SimdType::X86_Avx2; } else if (c.feature(CpuInfo::Feature::X86_Avx)) { if (c.feature(CpuInfo::Feature::X86_Fma4)) { suggested = SimdType::X86_Avx128Fma; } else { suggested = SimdType::X86_Avx; } } else if (c.feature(CpuInfo::Feature::X86_Sse4_1)) { suggested = SimdType::X86_Sse4_1; } else if (c.feature(CpuInfo::Feature::X86_Sse2)) { suggested = SimdType::X86_Sse2; } break; case CpuInfo::Vendor::Arm: if (c.feature(CpuInfo::Feature::Arm_NeonAsimd)) { suggested = SimdType::Arm_NeonAsimd; } else if (c.feature(CpuInfo::Feature::Arm_Neon)) { suggested = SimdType::Arm_Neon; } break; case CpuInfo::Vendor::Ibm: if (c.feature(CpuInfo::Feature::Ibm_Vsx)) { suggested = SimdType::Ibm_Vsx; } else if (c.feature(CpuInfo::Feature::Ibm_Vmx)) { suggested = SimdType::Ibm_Vmx; } else if (c.feature(CpuInfo::Feature::Ibm_Qpx)) { suggested = SimdType::Ibm_Qpx; } break; case CpuInfo::Vendor::Fujitsu: if (c.feature(CpuInfo::Feature::Fujitsu_HpcAce)) { suggested = SimdType::Fujitsu_HpcAce; } break; default: break; } } return suggested; } SimdType simdCompiled() { #if GMX_SIMD_X86_AVX_512_KNL return SimdType::X86_Avx512Knl; #elif GMX_SIMD_X86_AVX_512 return SimdType::X86_Avx512; #elif GMX_SIMD_X86_MIC return SimdType::X86_Mic; #elif GMX_SIMD_X86_AVX2_256 return SimdType::X86_Avx2; #elif GMX_SIMD_X86_AVX_256 return SimdType::X86_Avx; #elif GMX_SIMD_X86_AVX_128_FMA return SimdType::X86_Avx128Fma; #elif GMX_SIMD_X86_SSE4_1 return SimdType::X86_Sse4_1; #elif GMX_SIMD_X86_SSE2 return SimdType::X86_Sse2; #elif GMX_SIMD_ARM_NEON return SimdType::Arm_Neon; #elif GMX_SIMD_ARM_NEON_ASIMD return SimdType::Arm_NeonAsimd; #elif GMX_SIMD_IBM_QPX return SimdType::Ibm_Qpx; #elif GMX_SIMD_IBM_VMX return SimdType::Ibm_Vmx; #elif GMX_SIMD_IBM_VSX return SimdType::Ibm_Vsx; #elif GMX_SIMD_SPARC64_HPC_ACE return SimdType::Fujitsu_HpcAce; #elif GMX_SIMD_REFERENCE return SimdType::Reference; #else return SimdType::None; #endif } bool simdCheck(gmx::SimdType wanted, FILE * log, bool warnToStdErr) { SimdType compiled = simdCompiled(); if (compiled > wanted && !(compiled == SimdType::X86_Avx && wanted == SimdType::X86_Avx128Fma)) { fprintf(stderr, "Warning: SIMD instructions newer than hardware. Program will likely crash.\n" "SIMD instructions most likely to fit this hardware: %s\n" "SIMD instructions selected at GROMACS compile time: %s\n\n", simdString(wanted).c_str(), simdString(compiled).c_str()); } else if (wanted != compiled) { if (log != nullptr) { fprintf(log, "\nBinary not matching hardware - you might be losing performance.\n" "SIMD instructions most likely to fit this hardware: %s\n" "SIMD instructions selected at GROMACS compile time: %s\n\n", simdString(wanted).c_str(), simdString(compiled).c_str()); } if (warnToStdErr) { fprintf(stderr, "Compiled SIMD instructions: %s, GROMACS could use %s on this machine, which is better.\n\n", simdString(compiled).c_str(), simdString(wanted).c_str()); } } return (wanted == compiled); } }