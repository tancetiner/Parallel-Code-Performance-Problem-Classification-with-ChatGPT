#ifndef NBNXN_OPENCL_TYPES_H #define NBNXN_OPENCL_TYPES_H #define CL_USE_DEPRECATED_OPENCL_2_0_APIS #ifdef __APPLE__ # include <OpenCL/opencl.h> #else # include <CL/opencl.h> #endif #include "gromacs/mdlib/nbnxn_pairlist.h" #include "gromacs/mdtypes/interaction_const.h" #include "gromacs/utility/real.h" #define M_FLOAT_1_SQRTPI 0.564189583547756f #ifdef __cplusplus extern "C" { #endif enum eelOcl { eelOclCUT, eelOclRF, eelOclEWALD_TAB, eelOclEWALD_TAB_TWIN, eelOclEWALD_ANA, eelOclEWALD_ANA_TWIN, eelOclNR }; enum evdwOcl { evdwOclCUT, evdwOclFSWITCH, evdwOclPSWITCH, evdwOclEWALDGEOM, evdwOclEWALDLB, evdwOclNR }; typedef struct cl_nb_staging { float *e_lj; float *e_el; float (*fshift)[3]; } cl_nb_staging_t; typedef struct cl_atomdata { int natoms; int natoms_local; int nalloc; cl_mem xq; cl_mem f; size_t f_elem_size; cl_mem e_lj; cl_mem e_el; cl_mem fshift; size_t fshift_elem_size; int ntypes; cl_mem atom_types; cl_mem shift_vec; size_t shift_vec_elem_size; cl_bool bShiftVecUploaded; } cl_atomdata_t; typedef struct cl_nbparam { int eeltype; int vdwtype; float epsfac; float c_rf; float two_k_rf; float ewald_beta; float sh_ewald; float sh_lj_ewald; float ewaldcoeff_lj; float rcoulomb_sq; float rvdw_sq; float rvdw_switch; float rlist_sq; shift_consts_t dispersion_shift; shift_consts_t repulsion_shift; switch_consts_t vdw_switch; cl_mem nbfp_climg2d; cl_mem nbfp_comb_climg2d; int coulomb_tab_size; float coulomb_tab_scale; cl_mem coulomb_tab_climg2d; } cl_nbparam_t; typedef struct cl_nbparam_params { int eeltype; int vdwtype; float epsfac; float c_rf; float two_k_rf; float ewald_beta; float sh_ewald; float sh_lj_ewald; float ewaldcoeff_lj; float rcoulomb_sq; float rvdw_sq; float rvdw_switch; float rlist_sq; shift_consts_t dispersion_shift; shift_consts_t repulsion_shift; switch_consts_t vdw_switch; int coulomb_tab_size; float coulomb_tab_scale; } cl_nbparam_params_t; typedef struct cl_plist { int na_c; int nsci; int sci_nalloc; cl_mem sci; int ncj4; int cj4_nalloc; cl_mem cj4; cl_mem excl; int nexcl; int excl_nalloc; cl_bool bDoPrune; }cl_plist_t; typedef struct cl_timers { cl_event atdat; cl_event nb_h2d[2]; cl_event nb_d2h_f[2]; cl_event nb_d2h_fshift[2]; cl_event nb_d2h_e_el[2]; cl_event nb_d2h_e_lj[2]; cl_event pl_h2d_sci[2]; cl_event pl_h2d_cj4[2]; cl_event pl_h2d_excl[2]; cl_event nb_k[2]; } cl_timers_t; struct gmx_nbnxn_ocl_t { struct gmx_device_info_t *dev_info; cl_kernel kernel_noener_noprune_ptr[eelOclNR][evdwOclNR]; cl_kernel kernel_ener_noprune_ptr[eelOclNR][evdwOclNR]; cl_kernel kernel_noener_prune_ptr[eelOclNR][evdwOclNR]; cl_kernel kernel_ener_prune_ptr[eelOclNR][evdwOclNR]; cl_kernel kernel_memset_f; cl_kernel kernel_memset_f2; cl_kernel kernel_memset_f3; cl_kernel kernel_zero_e_fshift; cl_bool bUseTwoStreams; cl_bool bNonLocalStreamActive; cl_atomdata_t *atdat; cl_nbparam_t *nbparam; cl_plist_t *plist[2]; cl_nb_staging_t nbst; cl_mem debug_buffer; cl_command_queue stream[2]; cl_event nonlocal_done; cl_event misc_ops_and_local_H2D_done; cl_bool bDoTime; cl_timers_t *timers; struct gmx_wallclock_gpu_t *timings; }; #ifdef __cplusplus } #endif #endif