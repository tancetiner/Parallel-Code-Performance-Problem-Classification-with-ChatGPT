#include "dae_builder.hpp" #include <cctype> #include <ctime> #include <map> #include <set> #include <sstream> #include <string> #include <algorithm> #include "casadi_misc.hpp" #include "exception.hpp" #include "code_generator.hpp" #include "calculus.hpp" #include "xml_file.hpp" #include "external.hpp" namespace casadi { std::string to_string(Variable::Type v) { switch (v) { case Variable::REAL: return "real"; case Variable::INTEGER: return "integer"; case Variable::BOOLEAN: return "boolean"; case Variable::STRING: return "string"; case Variable::ENUM: return "enum"; default: break; } return ""; } std::string to_string(Variable::Causality v) { switch (v) { case Variable::PARAMETER: return "parameter"; case Variable::CALCULATED_PARAMETER: return "calculatedParameter"; case Variable::INPUT: return "input"; case Variable::OUTPUT: return "output"; case Variable::LOCAL: return "local"; case Variable::INDEPENDENT: return "independent"; default: break; } return ""; } std::string to_string(Variable::Variability v) { switch (v) { case Variable::CONSTANT: return "constant"; case Variable::FIXED: return "fixed"; case Variable::TUNABLE: return "tunable"; case Variable::DISCRETE: return "discrete"; case Variable::CONTINUOUS: return "continuous"; default: break; } return ""; } std::string to_string(Variable::Initial v) { switch (v) { case Variable::EXACT: return "exact"; case Variable::APPROX: return "approx"; case Variable::CALCULATED: return "calculated"; case Variable::INITIAL_NA: return "initial_na"; default: break; } return ""; } Variable::Initial Variable::default_initial(Variable::Causality causality, Variable::Variability variability) { switch (variability) { case CONSTANT: if (causality == OUTPUT || causality == LOCAL) return EXACT; break; case FIXED: case TUNABLE: if (causality == PARAMETER) return EXACT; else if (causality == CALCULATED_PARAMETER || causality == LOCAL) return CALCULATED; break; case DISCRETE: case CONTINUOUS: if (causality == OUTPUT || causality == LOCAL) return CALCULATED; break; default: break; } return INITIAL_NA; } Variable::Variable(const std::string& name) : name(name), value_reference(-1), description(""), type(REAL), causality(LOCAL), variability(CONTINUOUS), unit(""), display_unit(""), min(-std::numeric_limits<double>::infinity()), max(std::numeric_limits<double>::infinity()), nominal(1.0), start(0.0), derivative(-1), antiderivative(-1), dependency(false) { } void Variable::disp(std::ostream &stream, bool more) const { stream << name; } DaeBuilder::DaeBuilder() { this->t = MX::sym("t"); } void DaeBuilder::parse_fmi(const std::string& filename) { XmlFile xml_file("tinyxml"); XmlNode document = xml_file.parse(filename); size_t n_vars_before = variables_.size(); { const XmlNode& modvars = document[0]["ModelVariables"]; for (casadi_int i = 0; i < modvars.size(); ++i) { const XmlNode& vnode = modvars[i]; std::string name = vnode.get_attribute("name"); casadi_assert(varind_.find(name) == varind_.end(), "Duplicate variable: " + name); Variable var(name); var.v = MX::sym(name); (void)vnode.read_attribute("valueReference", var.value_reference); var.description = vnode.get_attribute("description", ""); var.causality = to_enum<Variable::Causality>(vnode.get_attribute("causality", "local")); var.variability = to_enum<Variable::Variability>( vnode.get_attribute("variability", "continuous")); std::string initial_str = vnode.get_attribute("initial", ""); if (initial_str.empty()) { var.initial = Variable::default_initial(var.causality, var.variability); } else { casadi_assert(var.causality != Variable::INPUT && var.causality != Variable::INDEPENDENT, "The combination causality = '" + to_string(var.causality) + "', " "initial = '" + initial_str + "' is not allowed per FMI 2.0 specification."); var.initial = to_enum<Variable::Initial>(initial_str); } if (vnode.has_child("Real")) { const XmlNode& props = vnode["Real"]; (void)props.read_attribute("unit", var.unit, false); (void)props.read_attribute("displayUnit", var.display_unit, false); (void)props.read_attribute("min", var.min, false); (void)props.read_attribute("max", var.max, false); (void)props.read_attribute("nominal", var.nominal, false); (void)props.read_attribute("start", var.start, false); (void)props.read_attribute("derivative", var.derivative, false); } add_variable(name, var); } for (auto it = variables_.begin() + n_vars_before; it != variables_.end(); ++it) { if (it->derivative >= 0) { it->derivative += n_vars_before - 1; variables_.at(it->derivative).antiderivative = it - variables_.begin(); } } } if (document[0].has_child("ModelStructure")) { const XmlNode& modst = document[0]["ModelStructure"]; for (const char* dtype : {"Outputs", "Derivatives"}) { if (modst.has_child(dtype)) { const XmlNode& outputs = modst[dtype]; for (casadi_int i = 0; i < outputs.size(); ++i) { const XmlNode& onode = outputs[i]; casadi_int index = -1; (void)onode.read_attribute("index", index, false); casadi_assert(index >= 1, "Non-positive output index"); index += n_vars_before - 1; std::vector<casadi_int> dependencies; (void)onode.read_attribute("dependencies", dependencies, false); for (casadi_int& d : dependencies) { casadi_assert(d >= 1, "Non-positive dependency index"); d += n_vars_before - 1; variables_.at(d).dependency = true; } } } } } for (auto it = variables_.begin() + n_vars_before; it != variables_.end(); ++it) { if (it->causality == Variable::INDEPENDENT) { this->t = it->v; } else if (it->causality == Variable::INPUT) { this->u.push_back(it->v); } else if (it->variability == Variable::CONSTANT) { this->c.push_back(it->v); this->cdef.push_back(it->start); } else if (it->variability == Variable::FIXED || it->variability == Variable::TUNABLE) { this->p.push_back(it->v); } else if (it->variability == Variable::CONTINUOUS) { if (it->antiderivative >= 0) { if (it->dependency) { this->x.push_back(it->v); add_ode("ode_" + it->name, variables_.at(it->antiderivative).v); } else { this->q.push_back(it->v); add_quad("quad_" + it->name, variables_.at(it->antiderivative).v); } } else if (it->dependency || it->derivative >= 0) { this->z.push_back(it->v); add_alg("alg_" + it->name, it->v - nan); } if (it->causality == Variable::OUTPUT) { this->y.push_back(it->v); this->ydef.push_back(it->v); } } else if (it->dependency) { casadi_warning("Cannot sort " + it->name); } } } Variable& DaeBuilder::read_variable(const XmlNode& node) { std::string qn = qualified_name(node); return variable(qn); } MX DaeBuilder::read_expr(const XmlNode& node) { const std::string& fullname = node.name(); if (fullname.find("exp:")== std::string::npos) { casadi_error("DaeBuilder::read_expr: unknown - expression is supposed to " "start with 'exp:' , got " + fullname); } std::string name = fullname.substr(4); if (name=="Add") { return read_expr(node[0]) + read_expr(node[1]); } else if (name=="Acos") { return acos(read_expr(node[0])); } else if (name=="Asin") { return asin(read_expr(node[0])); } else if (name=="Atan") { return atan(read_expr(node[0])); } else if (name=="Cos") { return cos(read_expr(node[0])); } else if (name=="Der") { return variables_.at(read_variable(node[0]).derivative).v; } else if (name=="Div") { return read_expr(node[0]) / read_expr(node[1]); } else if (name=="Exp") { return exp(read_expr(node[0])); } else if (name=="Identifier") { return read_variable(node).v; } else if (name=="IntegerLiteral") { casadi_int val; node.getText(val); return val; } else if (name=="Instant") { double val; node.getText(val); return val; } else if (name=="Log") { return log(read_expr(node[0])); } else if (name=="LogLeq") { return read_expr(node[0]) <= read_expr(node[1]); } else if (name=="LogGeq") { return read_expr(node[0]) >= read_expr(node[1]); } else if (name=="LogLt") { return read_expr(node[0]) < read_expr(node[1]); } else if (name=="LogGt") { return read_expr(node[0]) > read_expr(node[1]); } else if (name=="Max") { return fmax(read_expr(node[0]), read_expr(node[1])); } else if (name=="Min") { return fmin(read_expr(node[0]), read_expr(node[1])); } else if (name=="Mul") { return read_expr(node[0]) * read_expr(node[1]); } else if (name=="Neg") { return -read_expr(node[0]); } else if (name=="NoEvent") { casadi_int n = node.size(); MX ex = read_expr(node[n-1]); for (casadi_int i=n-3; i>=0; i -= 2) { ex = if_else(read_expr(node[i]), read_expr(node[i+1]), ex); } return ex; } else if (name=="Pow") { return pow(read_expr(node[0]), read_expr(node[1])); } else if (name=="RealLiteral") { double val; node.getText(val); return val; } else if (name=="Sin") { return sin(read_expr(node[0])); } else if (name=="Sqrt") { return sqrt(read_expr(node[0])); } else if (name=="StringLiteral") { throw CasadiException(node.getText()); } else if (name=="Sub") { return read_expr(node[0]) - read_expr(node[1]); } else if (name=="Tan") { return tan(read_expr(node[0])); } else if (name=="Time") { return t; } else if (name=="TimedVariable") { return read_variable(node[0]).v; } throw CasadiException(std::string("DaeBuilder::read_expr: Unknown node: ") + name); } void DaeBuilder::disp(std::ostream& stream, bool more) const { if (more) sanity_check(); stream << "nx = " << this->x.size() << ", " << "nz = " << this->z.size() << ", " << "nq = " << this->q.size() << ", " << "ny = " << this->y.size() << ", " << "np = " << this->p.size() << ", " << "nc = " << this->c.size() << ", " << "nv = " << this->v.size() << ", " << "nu = " << this->u.size(); if (!more) return; stream << std::endl; if (!fun_.empty()) { stream << "Functions" << std::endl; for (const Function& f : fun_) { stream << " " << f << std::endl; } } stream << "Variables" << std::endl; stream << " t = " << str(this->t) << std::endl; if (!this->x.empty()) stream << " x = " << str(this->x) << std::endl; if (!this->z.empty()) stream << " z = " << str(this->z) << std::endl; if (!this->q.empty()) stream << " q = " << str(this->q) << std::endl; if (!this->y.empty()) stream << " y = " << str(this->y) << std::endl; if (!this->p.empty()) stream << " p = " << str(this->p) << std::endl; if (!this->c.empty()) stream << " c = " << str(this->c) << std::endl; if (!this->v.empty()) stream << " v = " << str(this->v) << std::endl; if (!this->u.empty()) stream << " u = " << str(this->u) << std::endl; if (!this->v.empty()) { stream << "Dependent variables" << std::endl; for (casadi_int i=0; i<this->v.size(); ++i) stream << " " << str(this->v[i]) << " == " << str(this->vdef[i]) << std::endl; } if (!this->x.empty()) { stream << "Differential equations" << std::endl; for (casadi_int k=0; k<this->x.size(); ++k) { stream << " " << str(der(this->x[k])) << " == " << str(this->ode[k]) << std::endl; } } if (!this->alg.empty()) { stream << "Algebraic equations" << std::endl; for (casadi_int k=0; k<this->z.size(); ++k) { stream << " 0 == " << str(this->alg[k]) << std::endl; } } if (!this->q.empty()) { stream << "Quadrature equations" << std::endl; for (casadi_int k=0; k<this->q.size(); ++k) { stream << " " << str(der(this->q[k])) << " == " << str(this->quad[k]) << std::endl; } } if (!this->init.empty()) { stream << "Initial equations" << std::endl; for (casadi_int k=0; k<this->init.size(); ++k) { stream << " 0 == " << str(this->init[k]) << std::endl; } } if (!this->y.empty()) { stream << "Output variables" << std::endl; for (casadi_int i=0; i<this->y.size(); ++i) { stream << " " << str(this->y[i]) << " == " << str(this->ydef[i]) << std::endl; } } } void DaeBuilder::eliminate_quad() { this->x.insert(this->x.end(), this->q.begin(), this->q.end()); this->q.clear(); } const Variable& DaeBuilder::variable(const std::string& name) const { return const_cast<DaeBuilder*>(this)->variable(name); } Variable& DaeBuilder::variable(const std::string& name) { auto it = varind_.find(name); if (it == varind_.end()) casadi_error("No such variable: \"" + name + "\"."); return variables_.at(it->second); } bool DaeBuilder::has_variable(const std::string& name) const { return varind_.find(name) != varind_.end(); } void DaeBuilder::add_variable(const std::string& name, const Variable& var) { casadi_assert(!has_variable(name), "Variable \"" + name + "\" has already been added."); varind_[name] = variables_.size(); variables_.push_back(var); clear_cache(); } MX DaeBuilder::add_variable(const std::string& name, casadi_int n) { return add_variable(name, Sparsity::dense(n)); } MX DaeBuilder::add_variable(const std::string& name, const Sparsity& sp) { Variable v(name); v.v = MX::sym(name, sp); add_variable(name, v); return v.v; } void DaeBuilder::add_variable(const MX& new_v) { Variable v(new_v.name()); v.v = new_v; add_variable(new_v.name(), v); } MX DaeBuilder::add_x(const std::string& name, casadi_int n) { if (name.empty()) return add_x("x" + str(this->x.size()), n); MX new_x = add_variable(name, n); this->x.push_back(new_x); return new_x; } void DaeBuilder::register_x(const MX& new_x) { add_variable(new_x); this->x.push_back(new_x); } void DaeBuilder::register_z(const MX& new_z) { add_variable(new_z); this->z.push_back(new_z); } void DaeBuilder::register_v(const MX& new_v, const MX& new_vdef) { if (new_v.sparsity() != new_vdef.sparsity()) casadi_error("Mismatching sparsity in DaeBuilder::register_v"); add_variable(new_v); this->v.push_back(new_v); this->vdef.push_back(new_vdef); this->lam_vdef.push_back(MX::sym("lam_" + new_v.name(), new_v.sparsity())); } void DaeBuilder::register_y(const MX& new_y, const MX& new_ydef) { if (new_y.sparsity() != new_ydef.sparsity()) casadi_error("Mismatching sparsity in DaeBuilder::register_y"); add_variable(new_y); this->y.push_back(new_y); this->ydef.push_back(new_ydef); this->lam_ydef.push_back(MX::sym("lam_" + new_y.name(), new_y.sparsity())); } MX DaeBuilder::add_q(const std::string& name, casadi_int n) { if (name.empty()) return add_q("q" + str(this->q.size()), n); MX new_q = add_variable(name, n); this->q.push_back(new_q); return new_q; } MX DaeBuilder::add_z(const std::string& name, casadi_int n) { if (name.empty()) return add_z("z" + str(this->z.size()), n); MX new_z = add_variable(name, n); this->z.push_back(new_z); return new_z; } MX DaeBuilder::add_p(const std::string& name, casadi_int n) { if (name.empty()) return add_p("p" + str(this->p.size()), n); MX new_p = add_variable(name, n); this->p.push_back(new_p); return new_p; } MX DaeBuilder::add_u(const std::string& name, casadi_int n) { if (name.empty()) return add_u("u" + str(this->u.size()), n); MX new_u = add_variable(name, n); this->u.push_back(new_u); return new_u; } MX DaeBuilder::add_aux(const std::string& name, casadi_int n) { if (name.empty()) return add_aux("aux" + str(this->aux.size()), n); MX new_aux = add_variable(name, n); this->aux.push_back(new_aux); return new_aux; } MX DaeBuilder::add_v(const std::string& name, const MX& new_vdef) { MX new_v = add_variable(name, new_vdef.sparsity()); this->v.push_back(new_v); this->vdef.push_back(new_vdef); this->lam_vdef.push_back(MX::sym("lam_" + name, new_vdef.sparsity())); return new_v; } MX DaeBuilder::add_y(const std::string& name, const MX& new_ydef) { MX new_y = add_variable(name, new_ydef.sparsity()); this->y.push_back(new_y); this->ydef.push_back(new_ydef); this->lam_ydef.push_back(MX::sym("lam_" + name, new_ydef.sparsity())); return new_y; } void DaeBuilder::add_ode(const std::string& name, const MX& new_ode) { this->ode.push_back(new_ode); this->lam_ode.push_back(MX::sym("lam_" + name, new_ode.sparsity())); clear_cache(); } void DaeBuilder::add_alg(const std::string& name, const MX& new_alg) { this->alg.push_back(new_alg); this->lam_alg.push_back(MX::sym("lam_" + name, new_alg.sparsity())); clear_cache(); } void DaeBuilder::add_quad(const std::string& name, const MX& new_quad) { this->quad.push_back(new_quad); this->lam_quad.push_back(MX::sym("lam_" + name, new_quad.sparsity())); clear_cache(); } void DaeBuilder::sanity_check() const { casadi_assert(this->t.is_symbolic(), "Non-symbolic time t"); casadi_assert(this->t.is_scalar(), "Non-scalar time t"); casadi_assert(this->x.size()==this->ode.size(), "x and ode have different lengths"); for (casadi_int i=0; i<this->x.size(); ++i) { casadi_assert(this->x[i].size()==this->ode[i].size(), "ode has wrong dimensions"); casadi_assert(this->x[i].is_symbolic(), "Non-symbolic state x"); } casadi_assert(this->z.size()==this->alg.size(), "z and alg have different lengths"); for (casadi_int i=0; i<this->z.size(); ++i) { casadi_assert(this->z[i].is_symbolic(), "Non-symbolic algebraic variable z"); casadi_assert(this->z[i].size()==this->alg[i].size(), "alg has wrong dimensions"); } casadi_assert(this->q.size()==this->quad.size(), "q and quad have different lengths"); for (casadi_int i=0; i<this->q.size(); ++i) { casadi_assert(this->q[i].is_symbolic(), "Non-symbolic quadrature state q"); casadi_assert(this->q[i].size()==this->quad[i].size(), "quad has wrong dimensions"); } casadi_assert(this->v.size()==this->vdef.size(), "v and vdef have different lengths"); for (casadi_int i=0; i<this->v.size(); ++i) { casadi_assert(this->v[i].is_symbolic(), "Non-symbolic dependent parameter v"); casadi_assert(this->v[i].size()==this->vdef[i].size(), "vdef has wrong dimensions"); } casadi_assert(this->y.size()==this->ydef.size(), "y and ydef have different lengths"); for (casadi_int i=0; i<this->y.size(); ++i) { casadi_assert(this->y[i].is_symbolic(), "Non-symbolic output y"); casadi_assert(this->y[i].size()==this->ydef[i].size(), "ydef has wrong dimensions"); } for (casadi_int i=0; i<this->u.size(); ++i) { casadi_assert(this->u[i].is_symbolic(), "Non-symbolic control u"); } for (casadi_int i=0; i<this->p.size(); ++i) { casadi_assert(this->p[i].is_symbolic(), "Non-symbolic parameter p"); } } std::string DaeBuilder::qualified_name(const XmlNode& nn) { std::stringstream qn; for (casadi_int i=0; i<nn.size(); ++i) { if (i!=0) qn << "."; qn << nn[i].get_attribute("name"); if (nn[i].size()>0) { casadi_int ind; nn[i]["exp:ArraySubscripts"]["exp:IndexExpression"]["exp:IntegerLiteral"].getText(ind); qn << "[" << ind << "]"; } } return qn.str(); } MX DaeBuilder::var(const std::string& name) const { return variable(name).v; } MX DaeBuilder::der(const std::string& name) const { return variables_.at(variable(name).derivative).v; } MX DaeBuilder::der(const MX& var) const { casadi_assert_dev(var.is_column() && var.is_symbolic()); return der(var.name()); } void DaeBuilder::lift(bool lift_shared, bool lift_calls) { if (x.size() > 0) casadi_warning("Only lifting algebraic variables"); std::vector<MX> new_v, new_vdef; Dict opts{{"lift_shared", lift_shared}, {"lift_calls", lift_calls}, {"prefix", "v_"}, {"suffix", ""}, {"offset", static_cast<casadi_int>(this->v.size())}}; extract(this->alg, new_v, new_vdef, opts); for (size_t i = 0; i < new_v.size(); ++i) { register_v(new_v.at(i), new_vdef.at(i)); } } std::string DaeBuilder::description(const std::string& name) const { return variable(name).description; } void DaeBuilder::set_description(const std::string& name, const std::string& val) { variable(name).description = val; } std::string DaeBuilder::type(const std::string& name) const { return to_string(variable(name).type); } void DaeBuilder::set_type(const std::string& name, const std::string& val) { variable(name).type = to_enum<Variable::Type>(val); } std::string DaeBuilder::causality(const std::string& name) const { return to_string(variable(name).causality); } void DaeBuilder::set_causality(const std::string& name, const std::string& val) { variable(name).causality = to_enum<Variable::Causality>(val); } std::string DaeBuilder::variability(const std::string& name) const { return to_string(variable(name).variability); } void DaeBuilder::set_variability(const std::string& name, const std::string& val) { variable(name).variability = to_enum<Variable::Variability>(val); } std::string DaeBuilder::initial(const std::string& name) const { return to_string(variable(name).initial); } void DaeBuilder::set_initial(const std::string& name, const std::string& val) { variable(name).initial = to_enum<Variable::Initial>(val); } std::string DaeBuilder::unit(const std::string& name) const { return variable(name).unit; } std::string DaeBuilder::unit(const MX& var) const { casadi_assert(!var.is_column() && var.is_valid_input(), "DaeBuilder::unit: Argument must be a symbolic vector"); if (var.is_empty()) { return "n/a"; } else { std::vector<MX> prim = var.primitives(); std::string ret = unit(prim.at(0).name()); for (casadi_int i=1; i<prim.size(); ++i) { casadi_assert(ret == unit(prim.at(i).name()), "DaeBuilder::unit: Argument has mixed units"); } return ret; } } void DaeBuilder::set_unit(const std::string& name, const std::string& val) { variable(name).unit = val; } std::string DaeBuilder::display_unit(const std::string& name) const { return variable(name).display_unit; } void DaeBuilder::set_display_unit(const std::string& name, const std::string& val) { variable(name).display_unit = val; } double DaeBuilder::nominal(const std::string& name) const { return variable(name).nominal; } void DaeBuilder::set_nominal(const std::string& name, double val) { variable(name).nominal = val; } std::vector<double> DaeBuilder::nominal(const MX& var) const { casadi_assert(var.is_column() && var.is_valid_input(), "DaeBuilder::nominal: Argument must be a symbolic vector"); std::vector<double> ret(var.nnz()); std::vector<MX> prim = var.primitives(); for (casadi_int i=0; i<prim.size(); ++i) { casadi_assert_dev(prim[i].nnz()==1); ret[i] = nominal(prim.at(i).name()); } return ret; } void DaeBuilder::set_nominal(const MX& var, const std::vector<double>& val) { casadi_assert(var.is_column() && var.is_valid_input(), "DaeBuilder::nominal: Argument must be a symbolic vector"); casadi_assert(var.nnz()==var.nnz(), "DaeBuilder::nominal: Dimension mismatch"); std::vector<MX> prim = var.primitives(); for (casadi_int i=0; i<prim.size(); ++i) { casadi_assert_dev(prim[i].nnz()==1); set_nominal(prim.at(i).name(), val.at(i)); } } std::vector<double> DaeBuilder::attribute(getAtt f, const MX& var) const { casadi_assert(var.is_column() && var.is_valid_input(), "DaeBuilder::attribute: Argument must be a symbolic vector"); std::vector<double> ret(var.nnz()); std::vector<MX> prim = var.primitives(); for (casadi_int i=0; i<prim.size(); ++i) { casadi_assert_dev(prim[i].nnz()==1); ret[i] = (this->*f)(prim[i].name()); } return ret; } MX DaeBuilder::attribute(getAttS f, const MX& var) const { casadi_assert(var.is_column() && var.is_valid_input(), "DaeBuilder::attribute: Argument must be a symbolic vector"); MX ret = MX::zeros(var.sparsity()); std::vector<MX> prim = var.primitives(); for (casadi_int i=0; i<prim.size(); ++i) { casadi_assert_dev(prim[i].nnz()==1); ret.nz(i) = (this->*f)(prim[i].name()); } return ret; } void DaeBuilder::set_attribute(setAtt f, const MX& var, const std::vector<double>& val) { casadi_assert(var.is_column() && var.is_valid_input(), "DaeBuilder::set_attribute: Argument must be a symbolic vector"); casadi_assert(var.nnz()==val.size(), "DaeBuilder::set_attribute: Dimension mismatch"); std::vector<MX> prim = var.primitives(); for (casadi_int i=0; i<prim.size(); ++i) { casadi_assert_dev(prim[i].nnz()==1); (this->*f)(prim[i].name(), val[i]); } } void DaeBuilder::set_attribute(setAttS f, const MX& var, const MX& val) { casadi_assert(var.is_column() && var.is_valid_input(), "DaeBuilder::set_attribute: Argument must be a symbolic vector"); casadi_assert(var.sparsity()==val.sparsity(), "DaeBuilder::set_attribute: Sparsity mismatch"); std::vector<MX> prim = var.primitives(); for (casadi_int i=0; i<prim.size(); ++i) { casadi_assert_dev(prim[i].nnz()==1); (this->*f)(var.nz(i).name(), val.nz(i)); } } double DaeBuilder::min(const std::string& name) const { return variable(name).min; } std::vector<double> DaeBuilder::min(const MX& var) const { return attribute(&DaeBuilder::min, var); } void DaeBuilder::set_min(const std::string& name, double val) { variable(name).min = val; } void DaeBuilder::set_min(const MX& var, const std::vector<double>& val) { set_attribute(&DaeBuilder::set_min, var, val); } double DaeBuilder::max(const std::string& name) const { return variable(name).max; } std::vector<double> DaeBuilder::max(const MX& var) const { return attribute(&DaeBuilder::max, var); } void DaeBuilder::set_max(const std::string& name, double val) { variable(name).max = val; } void DaeBuilder::set_max(const MX& var, const std::vector<double>& val) { set_attribute(&DaeBuilder::set_max, var, val); } double DaeBuilder::start(const std::string& name) const { return variable(name).start; } std::vector<double> DaeBuilder::start(const MX& var) const { return attribute(&DaeBuilder::start, var); } void DaeBuilder::set_start(const std::string& name, double val) { variable(name).start = val; } void DaeBuilder::set_start(const MX& var, const std::vector<double>& val) { set_attribute(&DaeBuilder::set_start, var, val); } std::string DaeBuilder::name_in(DaeBuilderIn ind) { switch (ind) { case DAE_BUILDER_T: return "t"; case DAE_BUILDER_C: return "c"; case DAE_BUILDER_P: return "p"; case DAE_BUILDER_V: return "v"; case DAE_BUILDER_U: return "u"; case DAE_BUILDER_X: return "x"; case DAE_BUILDER_Z: return "z"; case DAE_BUILDER_Q: return "q"; case DAE_BUILDER_Y: return "y"; default: return ""; } } DaeBuilder::DaeBuilderIn DaeBuilder::enum_in(const std::string& id) { if (id=="t") { return DAE_BUILDER_T; } else if (id=="c") { return DAE_BUILDER_C; } else if (id=="p") { return DAE_BUILDER_P; } else if (id=="v") { return DAE_BUILDER_V; } else if (id=="u") { return DAE_BUILDER_U; } else if (id=="x") { return DAE_BUILDER_X; } else if (id=="z") { return DAE_BUILDER_Z; } else if (id=="q") { return DAE_BUILDER_Q; } else if (id=="y") { return DAE_BUILDER_Y; } else { return DAE_BUILDER_NUM_IN; } } std::vector<DaeBuilder::DaeBuilderIn> DaeBuilder::enum_in(const std::vector<std::string>& id) { std::vector<DaeBuilderIn> ret(id.size()); for (casadi_int i=0; i<id.size(); ++i) { ret[i] = enum_in(id[i]); } return ret; } std::string DaeBuilder::name_out(DaeBuilderOut ind) { switch (ind) { case DAE_BUILDER_VDEF: return "vdef"; case DAE_BUILDER_ODE: return "ode"; case DAE_BUILDER_ALG: return "alg"; case DAE_BUILDER_QUAD: return "quad"; case DAE_BUILDER_YDEF: return "ydef"; default: return ""; } } DaeBuilder::DaeBuilderOut DaeBuilder::enum_out(const std::string& id) { if (id=="vdef") { return DAE_BUILDER_VDEF; } else if (id=="ode") { return DAE_BUILDER_ODE; } else if (id=="alg") { return DAE_BUILDER_ALG; } else if (id=="quad") { return DAE_BUILDER_QUAD; } else if (id=="ydef") { return DAE_BUILDER_YDEF; } else { return DAE_BUILDER_NUM_OUT; } } std::vector<DaeBuilder::DaeBuilderOut> DaeBuilder::enum_out(const std::vector<std::string>& id) { std::vector<DaeBuilderOut> ret(id.size()); for (casadi_int i=0; i<id.size(); ++i) { ret[i] = enum_out(id[i]); } return ret; } std::string DaeBuilder::name_in() { std::stringstream ss; ss << "["; for (casadi_int i=0; i!=DAE_BUILDER_NUM_IN; ++i) { if (i!=0) ss << ","; ss << name_in(static_cast<DaeBuilderIn>(i)); } ss << "]"; return ss.str(); } std::string DaeBuilder::name_out() { std::stringstream ss; ss << "["; for (casadi_int i=0; i!=DAE_BUILDER_NUM_OUT; ++i) { if (i!=0) ss << ","; ss << name_out(static_cast<DaeBuilderOut>(i)); } ss << "]"; return ss.str(); } std::vector<MX> DaeBuilder::input(DaeBuilderIn ind) const { switch (ind) { case DAE_BUILDER_T: return std::vector<MX>(1, this->t); case DAE_BUILDER_C: return this->c; case DAE_BUILDER_P: return this->p; case DAE_BUILDER_V: return this->v; case DAE_BUILDER_U: return this->u; case DAE_BUILDER_X: return this->x; case DAE_BUILDER_Z: return this->z; case DAE_BUILDER_Q: return this->q; case DAE_BUILDER_Y: return this->y; default: return std::vector<MX>(); } } std::vector<MX> DaeBuilder::input(const std::vector<DaeBuilderIn>& ind) const { std::vector<MX> ret(ind.size()); for (casadi_int i=0; i<ind.size(); ++i) { ret[i] = vertcat(input(ind[i])); } return ret; } std::vector<MX> DaeBuilder::output(DaeBuilderOut ind) const { switch (ind) { case DAE_BUILDER_VDEF: return this->vdef; case DAE_BUILDER_ODE: return this->ode; case DAE_BUILDER_ALG: return this->alg; case DAE_BUILDER_QUAD: return this->quad; case DAE_BUILDER_YDEF: return this->ydef; default: return std::vector<MX>(); } } std::vector<MX> DaeBuilder::output(const std::vector<DaeBuilderOut>& ind) const { std::vector<MX> ret(ind.size()); for (casadi_int i=0; i<ind.size(); ++i) { ret[i] = vertcat(output(ind[i])); } return ret; } void DaeBuilder::add_lc(const std::string& name, const std::vector<std::string>& f_out) { sanity_check(); casadi_assert(!name.empty(), "DaeBuilder::add_lc: \"name\" is empty"); for (std::string::const_iterator i=name.begin(); i!=name.end(); ++i) { casadi_assert(isalnum(*i), "DaeBuilder::add_lc: \"name\" must be alphanumeric"); } casadi_assert(!f_out.empty(), "DaeBuilder::add_lc: Linear combination is empty"); std::vector<bool> in_use(DAE_BUILDER_NUM_OUT, false); for (casadi_int i=0; i<f_out.size(); ++i) { DaeBuilderOut oind = enum_out(f_out[i]); casadi_assert(oind!=DAE_BUILDER_NUM_OUT, "DaeBuilder::add_lc: No output expression " + f_out[i] + ". " "Valid expressions are " + name_out()); casadi_assert(!in_use[oind], "DaeBuilder::add_lc: Duplicate expression " + f_out[i]); in_use[oind] = true; } std::vector<std::string>& ret1 = lc_[name]; if (!ret1.empty()) casadi_warning("DaeBuilder::add_lc: Overwriting " << name); ret1 = f_out; } Function DaeBuilder::create(const std::string& fname, const std::vector<std::string>& s_in, const std::vector<std::string>& s_out, bool sx, bool lifted_calls) const { bool with_underscore = false; for (auto s_io : {&s_in, &s_out}) { for (const std::string& s : *s_io) { with_underscore = with_underscore || std::count(s.begin(), s.end(), '_'); } } if (with_underscore) { std::vector<std::string> s_in_mod(s_in), s_out_mod(s_out); for (auto s_io : {&s_in_mod, &s_out_mod}) { for (std::string& s : *s_io) replace(s.begin(), s.end(), '_', ':'); } return create(fname, s_in_mod, s_out_mod, sx, lifted_calls); } bool elim_v; if (this->v.empty()) { elim_v = false; } else { elim_v = true; for (const std::string& s : s_in) { if (s == "v") { elim_v = false; break; } } } if (lifted_calls) { casadi_assert(!elim_v, "Lifted calls cannot be used if dependent variables are eliminated"); lifted_calls = false; for (const MX& vdef_comp : this->vdef) { if (vdef_comp.is_output()) { lifted_calls = true; break; } } } std::string fname_nocalls = lifted_calls ? fname + "_nocalls" : fname; Function ret = oracle(sx, elim_v, lifted_calls).factory(fname_nocalls, s_in, s_out, lc_); if (!lifted_calls) return ret; std::vector<MX> ret_in = ret.mx_in(); std::vector<MX> ret_out = ret(ret_in); std::vector<casadi_int> h_offsets = offset(this->v); std::vector<MX> v_in, lam_vdef_in; for (size_t i = 0; i < s_in.size(); ++i) { if (ret.name_in(i) == "v") { v_in = vertsplit(ret_in[i], h_offsets); } else if (ret.name_in(i) == "lam_vdef") { lam_vdef_in = vertsplit(ret_in[i], h_offsets); } } std::map<MXNode*, size_t> v_map; for (size_t i = 0; i < this->v.size(); ++i) { v_map[this->v.at(i).get()] = i; } std::map<MXNode*, CallIO> call_nodes; for (size_t vdefind = 0; vdefind < this->vdef.size(); ++vdefind) { const MX& vdefref = this->vdef.at(vdefind); if (vdefref.is_output()) { MX c = vdefref.dep(0); auto call_it = call_nodes.find(c.get()); if (call_it == call_nodes.end()) { CallIO cio; cio.f = c.which_function(); cio.v.resize(c.n_dep(), -1); cio.arg.resize(cio.v.size()); for (casadi_int i = 0; i < cio.v.size(); ++i) { size_t v_ind = v_map.at(c.dep(i).get()); cio.v.at(i) = v_ind; cio.arg.at(i) = v_in.at(v_ind); } cio.vdef.resize(c.n_out(), -1); cio.res.resize(cio.vdef.size()); if (!lam_vdef_in.empty()) cio.adj1_arg.resize(c.n_out()); call_it = call_nodes.insert(std::make_pair(c.get(), cio)).first; } casadi_int oind = vdefref.which_output(); call_it->second.vdef.at(oind) = vdefind; call_it->second.res.at(oind) = v_in.at(vdefind); if (!lam_vdef_in.empty()) call_it->second.adj1_arg.at(oind) = lam_vdef_in.at(vdefind); } } for (size_t i = 0; i < ret_out.size(); ++i) { if (ret.name_out(i) == "jac_vdef_v") { ret_out.at(i) += jac_vdef_v_from_calls(call_nodes, h_offsets); } } MX extra_hess_v_v; for (auto&& e : lc_) { bool has_vdef = false; for (const std::string& r : e.second) { if (r == "vdef") { has_vdef = true; break; } } if (!has_vdef) continue; for (size_t i = 0; i < ret_out.size(); ++i) { if (ret.name_out(i) == "hess_" + e.first + "_v_v") { if (extra_hess_v_v.is_empty()) extra_hess_v_v = hess_v_v_from_calls(call_nodes, h_offsets); ret_out.at(i) += extra_hess_v_v; } } } ret = Function(fname, ret_in, ret_out, ret.name_in(), ret.name_out()); return ret; } MX DaeBuilder::jac_vdef_v_from_calls(std::map<MXNode*, CallIO>& call_nodes, const std::vector<casadi_int>& h_offsets) const { for (auto call_it = call_nodes.begin(); call_it != call_nodes.end(); ++call_it) { call_it->second.calc_jac(); } casadi_int voffset_begin = 0, voffset_end = 0, voffset_last = 0; std::vector<MX> vblocks, hblocks; std::map<size_t, MX> jac_brow; for (size_t vdefind = 0; vdefind < this->vdef.size(); ++vdefind) { const MX& vdefref = this->vdef.at(vdefind); voffset_begin = voffset_end; voffset_end += vdefref.numel(); if (vdefref.is_output()) { casadi_int oind = vdefref.which_output(); MX c = vdefref.dep(0); auto call_it = call_nodes.find(c.get()); casadi_assert_dev(call_it != call_nodes.end()); jac_brow.clear(); for (casadi_int iind = 0; iind < call_it->second.arg.size(); ++iind) { jac_brow[call_it->second.v.at(iind)] = call_it->second.jac(oind, iind); } if (voffset_last != voffset_begin) { vblocks.push_back(MX(voffset_begin - voffset_last, h_offsets.back())); } hblocks.clear(); casadi_int hoffset = 0; for (auto e : jac_brow) { if (hoffset < h_offsets.at(e.first)) hblocks.push_back(MX(vdefref.numel(), h_offsets.at(e.first) - hoffset)); hblocks.push_back(e.second); hoffset = h_offsets.at(e.first + 1); } if (hoffset < h_offsets.back()) hblocks.push_back(MX(vdefref.numel(), h_offsets.back() - hoffset)); vblocks.push_back(horzcat(hblocks)); voffset_last = voffset_end; } } if (voffset_last != voffset_end) { vblocks.push_back(MX(voffset_end - voffset_last, h_offsets.back())); } return vertcat(vblocks); } MX DaeBuilder::hess_v_v_from_calls(std::map<MXNode*, CallIO>& call_nodes, const std::vector<casadi_int>& h_offsets) const { for (auto&& call_ref : call_nodes) call_ref.second.calc_hess(); casadi_int voffset_begin = 0, voffset_end = 0, voffset_last = 0; std::vector<MX> vblocks, hblocks; std::map<size_t, MX> hess_brow; for (size_t vind1 = 0; vind1 < this->v.size(); ++vind1) { const MX& vref = this->v.at(vind1); voffset_begin = voffset_end; voffset_end += vref.numel(); hess_brow.clear(); for (auto&& call_ref : call_nodes) { for (size_t iind1 = 0; iind1 < call_ref.second.v.size(); ++iind1) { if (call_ref.second.v.at(iind1) == vind1) { for (size_t iind2 = 0; iind2 < call_ref.second.v.size(); ++iind2) { size_t vind2 = call_ref.second.v[iind2]; MX H_contr = call_ref.second.hess(iind1, iind2); auto it = hess_brow.find(vind2); if (it != hess_brow.end()) { it->second += H_contr; } else { hess_brow[vind2] = H_contr; } } break; } } } if (hess_brow.empty()) continue; if (voffset_last != voffset_begin) { vblocks.push_back(MX(voffset_begin - voffset_last, h_offsets.back())); } hblocks.clear(); casadi_int hoffset = 0; for (auto e : hess_brow) { if (hoffset < h_offsets.at(e.first)) hblocks.push_back(MX(vref.numel(), h_offsets.at(e.first) - hoffset)); hblocks.push_back(e.second); hoffset = h_offsets.at(e.first + 1); } if (hoffset < h_offsets.back()) hblocks.push_back(MX(vref.numel(), h_offsets.back() - hoffset)); vblocks.push_back(horzcat(hblocks)); voffset_last = voffset_end; } if (voffset_last != voffset_end) { vblocks.push_back(MX(voffset_end - voffset_last, h_offsets.back())); } return vertcat(vblocks); } Function DaeBuilder::add_fun(const Function& f) { casadi_assert(!has_fun(f.name()), "Function '" + f.name() + "' already exists"); fun_.push_back(f); return f; } Function DaeBuilder::add_fun(const std::string& name, const std::vector<std::string>& arg, const std::vector<std::string>& res, const Dict& opts) { casadi_assert(!has_fun(name), "Function '" + name + "' already exists"); std::vector<MX> arg_ex, res_ex; for (auto&& s : arg) arg_ex.push_back(var(s)); for (auto&& s : res) { casadi_int v_ind; for (v_ind=0; v_ind<this->v.size(); ++v_ind) { if (s==this->v.at(v_ind).name()) { res_ex.push_back(this->vdef.at(v_ind)); break; } } casadi_assert(v_ind<this->v.size(), "Cannot find dependent '" + s + "'"); } Function ret(name, arg_ex, res_ex, arg, res, opts); return add_fun(ret); } Function DaeBuilder::add_fun(const std::string& name, const Importer& compiler, const Dict& opts) { casadi_assert(!has_fun(name), "Function '" + name + "' already exists"); return add_fun(external(name, compiler, opts)); } bool DaeBuilder::has_fun(const std::string& name) const { for (const Function& f : fun_) { if (f.name()==name) return true; } return false; } Function DaeBuilder::fun(const std::string& name) const { casadi_assert(has_fun(name), "No such function: '" + name + "'"); for (const Function& f : fun_) { if (f.name()==name) return f; } return Function(); } void DaeBuilder::clear_cache() { for (bool sx : {false, true}) { for (bool elim_v : {false, true}) { for (bool lifted_calls : {false, true}) { Function& fref = oracle_[sx][elim_v][lifted_calls]; if (!fref.is_null()) fref = Function(); } } } } const Function& DaeBuilder::oracle(bool sx, bool elim_v, bool lifted_calls) const { if (oracle_[false][elim_v][lifted_calls].is_null()) { std::vector<MX> f_in, f_out, v; std::vector<std::string> f_in_name, f_out_name; casadi_int vdef_ind = -1; casadi_assert(!(elim_v && lifted_calls), "Incompatible options"); bool subst_v = false; for (casadi_int i = 0; i != DAE_BUILDER_NUM_IN; ++i) { v = input(static_cast<DaeBuilderIn>(i)); if (!v.empty()) { if (elim_v && i == DAE_BUILDER_V) { subst_v = true; } else { f_in.push_back(vertcat(v)); f_in_name.push_back(name_in(static_cast<DaeBuilderIn>(i))); } } } for (casadi_int i = 0; i != DAE_BUILDER_NUM_OUT; ++i) { v = output(static_cast<DaeBuilderOut>(i)); if (!v.empty()) { f_out.push_back(vertcat(v)); f_out_name.push_back(name_out(static_cast<DaeBuilderOut>(i))); if (i == DAE_BUILDER_VDEF) vdef_ind = i; } } if (subst_v) { std::vector<MX> vdef(this->vdef); substitute_inplace(this->v, vdef, f_out, false); } else if (lifted_calls && vdef_ind >= 0) { std::vector<MX> vdef(this->vdef); for (MX& vdefref : vdef) { if (vdefref.is_output()) vdefref = MX::zeros(vdefref.sparsity()); } f_out.at(vdef_ind) = vertcat(vdef); } oracle_[false][elim_v][lifted_calls] = Function("mx_oracle", f_in, f_out, f_in_name, f_out_name); } if (!sx) return oracle_[false][elim_v][lifted_calls]; Function& sx_oracle = oracle_[true][elim_v][lifted_calls]; if (sx_oracle.is_null()) sx_oracle = oracle_[false][elim_v][lifted_calls].expand("sx_oracle"); return sx_oracle; } void DaeBuilder::CallIO::calc_jac() { for (casadi_int i = 0; i < this->f.n_in(); ++i) { casadi_assert(this->f.size_in(i) == this->arg.at(i).size(), "Call input not provided"); } for (casadi_int i = 0; i < this->f.n_out(); ++i) { casadi_assert(this->f.size_out(i) == this->res.at(i).size(), "Call output not provided"); } this->J = this->f.jacobian(); std::vector<MX> call_in = this->arg; call_in.insert(call_in.end(), this->res.begin(), this->res.end()); this->jac_res = this->J(call_in); } void DaeBuilder::CallIO::calc_grad() { for (casadi_int i = 0; i < this->f.n_in(); ++i) { casadi_assert(this->f.size_in(i) == this->arg.at(i).size(), "Call input not provided"); } casadi_assert(this->adj1_arg.size() == this->res.size(), "Input 'lam_vdef' not provided"); for (casadi_int i = 0; i < this->f.n_out(); ++i) { casadi_assert(this->f.size_out(i) == this->res.at(i).size(), "Call output not provided"); casadi_assert(this->adj1_arg.at(i).size() == this->res.at(i).size(), "Call adjoint seed not provided"); } if (!this->jac_res.empty()) casadi_warning("Jacobian blocks currently not reused for gradient calculation"); this->adj1_f = this->f.reverse(1); std::vector<MX> call_in = this->arg; call_in.insert(call_in.end(), this->res.begin(), this->res.end()); call_in.insert(call_in.end(), this->adj1_arg.begin(), this->adj1_arg.end()); this->adj1_res = this->adj1_f(call_in); } void DaeBuilder::CallIO::calc_hess() { if (this->adj1_f.is_null()) calc_grad(); this->H = this->adj1_f.jacobian(); std::vector<MX> call_in = this->arg; call_in.insert(call_in.end(), this->res.begin(), this->res.end()); call_in.insert(call_in.end(), this->adj1_arg.begin(), this->adj1_arg.end()); call_in.insert(call_in.end(), this->adj1_res.begin(), this->adj1_res.end()); this->hess_res = this->H(call_in); } const MX& DaeBuilder::CallIO::jac(casadi_int oind, casadi_int iind) const { casadi_int ind = iind + oind * this->arg.size(); return this->jac_res.at(ind); } const MX& DaeBuilder::CallIO::hess(casadi_int iind1, casadi_int iind2) const { casadi_int ind = iind1 + iind1 * this->adj1_arg.size(); return this->hess_res.at(ind); } }