#if defined( KOKKOS_ENABLE_RFO_PREFETCH ) #include <xmmintrin.h> #endif #include <Kokkos_Macros.hpp> #if defined( KOKKOS_ATOMIC_HPP) && ! defined( KOKKOS_ATOMIC_DECREMENT_HPP ) #define KOKKOS_ATOMIC_DECREMENT_HPP #include "impl/Kokkos_Atomic_Fetch_Sub.hpp" namespace Kokkos { template<> KOKKOS_INLINE_FUNCTION void atomic_decrement<char>(volatile char* a) { #if defined( KOKKOS_ENABLE_ASM ) && defined( KOKKOS_ENABLE_ISA_X86_64 ) && ! defined(_WIN32) && ! defined(__CUDA_ARCH__) #if defined( KOKKOS_ENABLE_RFO_PREFETCH ) _mm_prefetch( (const char*) a, _MM_HINT_ET0 ); #endif __asm__ __volatile__( "lock decb %0" : : "m" (a[0]) : "memory" ); #else Kokkos::atomic_fetch_sub<char>(a, 1); #endif } template<> KOKKOS_INLINE_FUNCTION void atomic_decrement<short>(volatile short* a) { #if defined( KOKKOS_ENABLE_ASM ) && defined( KOKKOS_ENABLE_ISA_X86_64 ) && ! defined(_WIN32) && ! defined(__CUDA_ARCH__) #if defined( KOKKOS_ENABLE_RFO_PREFETCH ) _mm_prefetch( (const char*) a, _MM_HINT_ET0 ); #endif __asm__ __volatile__( "lock decw %0" : : "m" (a[0]) : "memory" ); #else Kokkos::atomic_fetch_sub<short>(a, 1); #endif } template<> KOKKOS_INLINE_FUNCTION void atomic_decrement<int>(volatile int* a) { #if defined( KOKKOS_ENABLE_ASM ) && defined( KOKKOS_ENABLE_ISA_X86_64 ) && ! defined(_WIN32) && ! defined(__CUDA_ARCH__) #if defined( KOKKOS_ENABLE_RFO_PREFETCH ) _mm_prefetch( (const char*) a, _MM_HINT_ET0 ); #endif __asm__ __volatile__( "lock decl %0" : : "m" (a[0]) : "memory" ); #else Kokkos::atomic_fetch_sub<int>(a, 1); #endif } template<> KOKKOS_INLINE_FUNCTION void atomic_decrement<long long int>(volatile long long int* a) { #if defined( KOKKOS_ENABLE_ASM ) && defined( KOKKOS_ENABLE_ISA_X86_64 ) && ! defined(_WIN32) && ! defined(__CUDA_ARCH__) #if defined( KOKKOS_ENABLE_RFO_PREFETCH ) _mm_prefetch( (const char*) a, _MM_HINT_ET0 ); #endif __asm__ __volatile__( "lock decq %0" : : "m" (a[0]) : "memory" ); #else Kokkos::atomic_fetch_sub<long long int>(a, 1); #endif } template<typename T> KOKKOS_INLINE_FUNCTION void atomic_decrement(volatile T* a) { Kokkos::atomic_fetch_sub<T>(a, 1); } } #endif