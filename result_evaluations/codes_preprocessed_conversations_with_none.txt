Folder Index: 0	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 1	||	Category: Memory/Data locality	||	Classification List: ['None']
Folder Index: 2	||	Category: Memory/Data locality	||	Classification List: ['Task parallelism', 'None', 'None']
Folder Index: 3	||	Category: Memory/Data locality	||	Classification List: ['None', 'None', 'None', 'None', 'None', 'None', 'None', 'Memory/Data locality', 'None', 'None', 'None', 'None', 'None', 'None']
Folder Index: 4	||	Category: Memory/Data locality	||	Classification List: ['None', 'Task parallelism']
Folder Index: 5	||	Category: Memory/Data locality	||	Classification List: ['Instruction level parallelism', 'Unnecessary', 'Unnecessary header inclusion']
Folder Index: 6	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 7	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 8	||	Category: Memory/Data locality	||	Classification List: ['None', 'None']
Folder Index: 9	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 10	||	Category: Memory/Data locality	||	Classification List: ['None']
Folder Index: 11	||	Category: Memory/Data locality	||	Classification List: ['None', 'None']
Folder Index: 12	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 13	||	Category: Memory/Data locality	||	Classification List: ['None', 'None', 'None', 'None']
Folder Index: 14	||	Category: Memory/Data locality	||	Classification List: ['Instruction level parallelism', 'None']
Folder Index: 15	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 16	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 17	||	Category: Memory/Data locality	||	Classification List: ['None', 'None']
Folder Index: 18	||	Category: Memory/Data locality	||	Classification List: ['None']
Folder Index: 19	||	Category: Memory/Data locality	||	Classification List: ['Memory/Data locality', 'Memory/Data locality The constant array d_ref_pat is declared and initialized in global memory, which may lead to slower memory access compared to if it were declared and initialized in shared memory This may cause a decrease in the performance of the program due to decreased memory locality']
Folder Index: 20	||	Category: Memory/Data locality	||	Classification List: ['Unintentional Programming logic error \n\nExplanation: In the `locate_features_core` function, there is a possible unintentional programming logic error In the conditional statements, the `return` statement is used to exit the function However, the function does not always return a value In particular, if the control flow does not enter any of the `if` statements,']
Folder Index: 21	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 22	||	Category: Memory/Data locality	||	Classification List: ['None']
Folder Index: 23	||	Category: Memory/Data locality	||	Classification List: ['None']
Folder Index: 24	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 25	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 26	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 27	||	Category: Memory/Data locality	||	Classification List: ['Unnecessary process communiction', 'None']
Folder Index: 28	||	Category: Memory/Data locality	||	Classification List: ['None']
Folder Index: 29	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 30	||	Category: Memory/Data locality	||	Classification List: ['Inefficient thread', 'Unnecessary operation', 'None']
Folder Index: 31	||	Category: Memory/Data locality	||	Classification List: ['Instruction level parallelism', 'Inefficient thread mapping / inefficient block size / Load imbalance', 'inefficiency due to new compiler version', 'memory locality']
Folder Index: 32	||	Category: Memory/Data locality	||	Classification List: ['Inefficient thread mapping / inefficient block size / Load imbalance']
Folder Index: 33	||	Category: Memory/Data locality	||	Classification List: ['None']
Folder Index: 34	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 35	||	Category: Memory/Data locality	||	Classification List: []
Folder Index: 36	||	Category: Micro-architectural inefficiency	||	Classification List: ['Vector/SIMD parallelism', 'Micro-architectural inefficiency This code uses inline assembly, which can make the code harder to maintain, and the use of vectors can cause an inefficiency problem due to potential underutilization of AVX units']
Folder Index: 37	||	Category: Micro-architectural inefficiency	||	Classification List: ['Load imbalance']
Folder Index: 38	||	Category: Micro-architectural inefficiency	||	Classification List: ['None']
Folder Index: 39	||	Category: Micro-architectural inefficiency	||	Classification List: []
Folder Index: 40	||	Category: Micro-architectural inefficiency	||	Classification List: ['Instruction level parallelism', 'None']
Folder Index: 41	||	Category: Micro-architectural inefficiency	||	Classification List: ['None', 'None']
Folder Index: 42	||	Category: Micro-architectural inefficiency	||	Classification List: ['None']
Folder Index: 43	||	Category: Micro-architectural inefficiency	||	Classification List: ['None']
Folder Index: 44	||	Category: Micro-architectural inefficiency	||	Classification List: ['None']
Folder Index: 45	||	Category: Micro-architectural inefficiency	||	Classification List: []
Folder Index: 46	||	Category: Micro-architectural inefficiency	||	Classification List: ['Micro-architectural inefficiency']
Folder Index: 47	||	Category: Micro-architectural inefficiency	||	Classification List: ['None', 'None', 'None']
Folder Index: 48	||	Category: Micro-architectural inefficiency	||	Classification List: []
Folder Index: 49	||	Category: Micro-architectural inefficiency	||	Classification List: []
Folder Index: 50	||	Category: Micro-architectural inefficiency	||	Classification List: []
Folder Index: 51	||	Category: Micro-architectural inefficiency	||	Classification List: []
Folder Index: 52	||	Category: Micro-architectural inefficiency	||	Classification List: []
Folder Index: 53	||	Category: Micro-architectural inefficiency	||	Classification List: ['Micro-architectural inefficiency The code has a lot of SSE instructions for dot product calculation This could be optimized and use AVX instructions instead that could improve the overall performance']
Folder Index: 54	||	Category: Micro-architectural inefficiency	||	Classification List: []
Folder Index: 55	||	Category: Micro-architectural inefficiency	||	Classification List: ['Inefficeint thread mapping / inefficient block size / Load imbalance', 'Task parallelism']
Folder Index: 56	||	Category: Micro-architectural inefficiency	||	Classification List: ['None']
Folder Index: 57	||	Category: Micro-architectural inefficiency	||	Classification List: ['None']
Folder Index: 58	||	Category: Vector/SIMD parallelism	||	Classification List: ['None']
Folder Index: 59	||	Category: Vector/SIMD parallelism	||	Classification List: ['Memory/Data locality']
Folder Index: 60	||	Category: Vector/SIMD parallelism	||	Classification List: ['Vector/SIMD parallelism', 'None', 'Vector/SIMD parallelism', 'Vector/SIMD parallelism', 'Vector/SIMD parallelism', 'None']
Folder Index: 61	||	Category: Vector/SIMD parallelism	||	Classification List: ['Unnecessary conditional check and function call in the SMP block of code', 'None', 'None', 'None', 'Vector/SIMD parallelism', 'None']
Folder Index: 62	||	Category: Vector/SIMD parallelism	||	Classification List: ['None']
Folder Index: 63	||	Category: GPU parallelism	||	Classification List: ['Over-Parallelization', 'None', 'None', 'None', 'None']
Folder Index: 64	||	Category: GPU parallelism	||	Classification List: []
Folder Index: 65	||	Category: Instruction level parallelism	||	Classification List: ['None']
Folder Index: 66	||	Category: Task parallelism	||	Classification List: ['None']
Folder Index: 67	||	Category: Task parallelism	||	Classification List: []
Folder Index: 68	||	Category: Task parallelism	||	Classification List: ['Memory/Data locality', 'Memory/Data locality']
Folder Index: 69	||	Category: Task parallelism	||	Classification List: ['None']
Folder Index: 70	||	Category: small parallel region	||	Classification List: ['Task parallelism']
Folder Index: 71	||	Category: small parallel region	||	Classification List: ['Load imbalance']
Folder Index: 72	||	Category: small parallel region	||	Classification List: []
Folder Index: 73	||	Category: small parallel region	||	Classification List: []
Folder Index: 74	||	Category: small parallel region	||	Classification List: []
Folder Index: 75	||	Category: Inefficeint thread mapping / inefficient block size / Load imbalance	||	Classification List: ['None', 'None']
Folder Index: 76	||	Category: Inefficeint thread mapping / inefficient block size / Load imbalance	||	Classification List: ['None']
Folder Index: 77	||	Category: Inefficeint thread mapping / inefficient block size / Load imbalance	||	Classification List: ['None']
Folder Index: 78	||	Category: Inefficeint thread mapping / inefficient block size / Load imbalance	||	Classification List: ['None', 'Inefficient thread mapping / inefficient block size / Load imbalance']
Folder Index: 79	||	Category: Inefficeint thread mapping / inefficient block size / Load imbalance	||	Classification List: ['Memory/Data locality']
Folder Index: 80	||	Category: Inefficeint thread mapping / inefficient block size / Load imbalance	||	Classification List: ['None', 'None']
Folder Index: 81	||	Category: Under-parallelization	||	Classification List: []
Folder Index: 82	||	Category: Under-parallelization	||	Classification List: ['GPU parallelism', 'Memory/Data locality', 'Inefficeint thread mapping / inefficient block size / Load imbalance']
Folder Index: 83	||	Category: Over-Parallelization	||	Classification List: ['None']
Folder Index: 84	||	Category: Over-Parallelization	||	Classification List: []
Folder Index: 85	||	Category: Unncessary locks	||	Classification List: []
Folder Index: 86	||	Category: Unncessary locks	||	Classification List: []
Folder Index: 87	||	Category: Unncessary locks	||	Classification List: []
Folder Index: 88	||	Category: Unncessary strong memory consistency	||	Classification List: []
Folder Index: 89	||	Category: Lock management overhead	||	Classification List: []
Folder Index: 90	||	Category: Unnecessary synchronization	||	Classification List: ['Instruction level parallelism']
Folder Index: 91	||	Category: Unnecessary synchronization	||	Classification List: []
Folder Index: 92	||	Category: Unnecessary process communiction	||	Classification List: ['None', 'None']
Folder Index: 93	||	Category: Unnecessary process communiction	||	Classification List: []
Folder Index: 94	||	Category: Unnecessary operation/traversal/function call	||	Classification List: ['None']
Folder Index: 95	||	Category: Unnecessary operation/traversal/function call	||	Classification List: ['None']
Folder Index: 96	||	Category: Unnecessary operation/traversal/function call	||	Classification List: []
Folder Index: 97	||	Category: Unnecessary operation/traversal/function call	||	Classification List: ['None']
Folder Index: 98	||	Category: Unnecessary operation/traversal/function call	||	Classification List: []
Folder Index: 99	||	Category: Unnecessary operation/traversal/function call	||	Classification List: []
Folder Index: 100	||	Category: Unnecessary operation/traversal/function call	||	Classification List: ['None']
Folder Index: 101	||	Category: Unnecessary operation/traversal/function call	||	Classification List: ['Instruction level parallelism', 'Memory/Data locality', 'Under-parallelization', 'Load imbalance', 'Inefficient loop unrolling']
Folder Index: 102	||	Category: Unnecessary operation/traversal/function call	||	Classification List: []
Folder Index: 103	||	Category: Unnecessary operation/traversal/function call	||	Classification List: []
Folder Index: 104	||	Category: Unnecessary operation/traversal/function call	||	Classification List: ['Instruction level parallelism']
Folder Index: 105	||	Category: Unnecessary operation/traversal/function call	||	Classification List: []
Folder Index: 106	||	Category: Unnecessary operation/traversal/function call	||	Classification List: ['Inefficiency due to new compiler version', 'None']
Folder Index: 107	||	Category: Redundant operation	||	Classification List: ['None']
Folder Index: 108	||	Category: Redundant operation	||	Classification List: ['Micro-architectural inefficiency']
Folder Index: 109	||	Category: Redundant operation	||	Classification List: ['Instruction level parallelism']
Folder Index: 110	||	Category: Redundant operation	||	Classification List: ['Inefficient thread mapping / inefficient block size / Load imbalance']
Folder Index: 111	||	Category: Redundant operation	||	Classification List: []
Folder Index: 112	||	Category: Redundant operation	||	Classification List: ['None', 'None']
Folder Index: 113	||	Category: Redundant operation	||	Classification List: ['Task parallelism', 'Inefficient thread mapping / inefficient block size / Load imbalance']
Folder Index: 114	||	Category: Redundant operation	||	Classification List: ['None']
Folder Index: 115	||	Category: Redundant operation	||	Classification List: []
Folder Index: 116	||	Category: Redundant operation	||	Classification List: ['Sequential I/O operation']
Folder Index: 117	||	Category: Redundant operation	||	Classification List: []
Folder Index: 118	||	Category: Redundant operation	||	Classification List: ['None']
Folder Index: 119	||	Category: Redundant operation	||	Classification List: []
Folder Index: 120	||	Category: Redundant operation	||	Classification List: ['Inefficeint thread mapping / inefficient block size / Load imbalance']
Folder Index: 121	||	Category: Redundant operation	||	Classification List: []
Folder Index: 122	||	Category: Redundant operation	||	Classification List: ['None']
Folder Index: 123	||	Category: Expensive operation	||	Classification List: []
Folder Index: 124	||	Category: Expensive operation	||	Classification List: ['Load imbalance', 'None', 'None']
Folder Index: 125	||	Category: Expensive operation	||	Classification List: ['None']
Folder Index: 126	||	Category: Expensive operation	||	Classification List: ['None']
Folder Index: 127	||	Category: Expensive operation	||	Classification List: ['Memory/Data locality']
Folder Index: 128	||	Category: Expensive operation	||	Classification List: ['None']
Folder Index: 129	||	Category: Expensive operation	||	Classification List: []
Folder Index: 130	||	Category: Expensive operation	||	Classification List: []
Folder Index: 131	||	Category: Expensive operation	||	Classification List: ['None']
Folder Index: 132	||	Category: Expensive operation	||	Classification List: ['Memory/Data locality', 'Instruction level parallelism', 'None']
Folder Index: 133	||	Category: Expensive operation	||	Classification List: ['None']
Folder Index: 134	||	Category: Expensive operation	||	Classification List: ['None']
Folder Index: 135	||	Category: Expensive operation	||	Classification List: ['Vector/SIMD parallelism', 'None']
Folder Index: 136	||	Category: Expensive operation	||	Classification List: ['Memory/Data locality']
Folder Index: 137	||	Category: Expensive operation	||	Classification List: ['None', 'None', 'None', 'None']
Folder Index: 138	||	Category: Expensive operation	||	Classification List: []
Folder Index: 139	||	Category: Expensive operation	||	Classification List: []
Folder Index: 140	||	Category: Expensive operation	||	Classification List: ['None']
Folder Index: 141	||	Category: Expensive operation	||	Classification List: ['None']
Folder Index: 142	||	Category: Expensive operation	||	Classification List: []
Folder Index: 143	||	Category: Expensive operation	||	Classification List: []
Folder Index: 144	||	Category: Expensive operation	||	Classification List: ['None', 'Unnecessary synchronization']
Folder Index: 145	||	Category: Expensive operation	||	Classification List: []
Folder Index: 146	||	Category: Expensive operation	||	Classification List: []
Folder Index: 147	||	Category: Expensive operation	||	Classification List: ['Unnecessary print statement']
Folder Index: 148	||	Category: Expensive operation	||	Classification List: []
Folder Index: 149	||	Category: Expensive operation	||	Classification List: []
Folder Index: 150	||	Category: Expensive operation	||	Classification List: []
Folder Index: 151	||	Category: Expensive operation	||	Classification List: []
Folder Index: 152	||	Category: Frequent  function call	||	Classification List: ['None']
Folder Index: 153	||	Category: Frequent  function call	||	Classification List: ['None', 'None']
Folder Index: 154	||	Category: Frequent  function call	||	Classification List: ['None']
Folder Index: 155	||	Category: Inefficient data-structure library	||	Classification List: ['None']
Folder Index: 156	||	Category: Inefficient data-structure library	||	Classification List: ['None', 'None']
Folder Index: 157	||	Category: Inefficient data-structure library	||	Classification List: ['Memory/Data locality']
Folder Index: 158	||	Category: Inefficient data-structure library	||	Classification List: ['None']
Folder Index: 159	||	Category: Inefficient data-structure library	||	Classification List: ['Inefficeint thread mapping / inefficient block size / Load imbalance']
Folder Index: 160	||	Category: Inefficient data-structure library	||	Classification List: []
Folder Index: 161	||	Category: Inefficient data-structure library	||	Classification List: ['None']
Folder Index: 162	||	Category: Inefficient data-structure library	||	Classification List: []
Folder Index: 163	||	Category: Inefficient data-structure library	||	Classification List: ['None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'Memory/Data locality', 'None', 'None', 'None', 'None', 'None']
Folder Index: 164	||	Category: Usage of improper data type	||	Classification List: []
Folder Index: 165	||	Category: Usage of improper data type	||	Classification List: ["Unnecessary memory allocation The function creates a new Array object using the 'createRefArray' function and then deletes it at the end of the function using the 'delete' keyword However, the object could be passed by reference rather than creating and deleting it at each invocation", 'Inefficeint thread mapping / inefficient block size / Load imbalance', 'None', 'None', 'Unnecessary operation/traversal/function call', 'Memory/Data locality', 'None']
Folder Index: 166	||	Category: Usage of improper data type	||	Classification List: ['None', 'Memory/Data locality', 'Unncessary locks', 'Memory/Data locality', 'Load imbalance', 'Memory/Data locality', 'Instruction level parallelism']
Folder Index: 167	||	Category: memory leak	||	Classification List: ['None']
Folder Index: 168	||	Category: memory leak	||	Classification List: ['None']
Folder Index: 169	||	Category: memory leak	||	Classification List: ['None']
Folder Index: 170	||	Category: memory leak	||	Classification List: ['None']
Folder Index: 171	||	Category: memory leak	||	Classification List: []
Folder Index: 172	||	Category: repreated memory allocation	||	Classification List: ['Unnecessary memory allocation \n\nThe "ind" array is allocated in every iteration of the loop in the function PrunedRowsCreate It would be more efficient to allocate a maximum size of "count" at the beginning of each iteration and then reallocate memory if necessary', 'None', 'Inefficient data-structure library']
Folder Index: 173	||	Category: repreated memory allocation	||	Classification List: ['None']
Folder Index: 174	||	Category: repreated memory allocation	||	Classification List: ['Unncessary locks']
Folder Index: 175	||	Category: repreated memory allocation	||	Classification List: ['None']
Folder Index: 176	||	Category: Redundant memory allocation	||	Classification List: ['None', 'None', 'None', 'Inefficient thread mapping / inefficient block size / Load imbalance']
Folder Index: 177	||	Category: Slower memory allocation library call	||	Classification List: []
Folder Index: 178	||	Category: Insufficient memory	||	Classification List: []
Folder Index: 179	||	Category: unnecessary data copy	||	Classification List: ['None']
Folder Index: 180	||	Category: sequential I/O operation	||	Classification List: []
Folder Index: 181	||	Category: over parallelization	||	Classification List: []
Folder Index: 182	||	Category: boundary condition check	||	Classification List: ['None', 'Instruction level parallelism']
Folder Index: 183	||	Category: Unintentional Programming logic error	||	Classification List: ['Task parallelism', 'small parallel region']
Folder Index: 184	||	Category: Inefficiency due to new compiler version 	||	Classification List: ['Instruction level parallelism']

-------------------------------
Number of all the commits: 185
Number of commits with response: 117
Number of commits with no response: 68

Number of None response: 62
Number of non-None response: 55
Number of correct response: 5
Number of wrong response: 50
Number of wrong format response: 0