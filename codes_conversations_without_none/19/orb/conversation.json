{"messages": [{"role": "system", "content": "You are a parallel computing expert. I will provide you a source code in C or C++ and I want you to classify if there is an inefficiency problem in the code. If there is an problem, I want you to classify this problem from the following list: ['Memory/Data locality', 'Micro-architectural inefficiency', 'Vector/SIMD parallelism', 'GPU parallelism', 'Instruction level parallelism', 'Task parallelism', 'small parallel region', 'Inefficeint thread mapping / inefficient block size / Load imbalance', 'Under-parallelization', 'Over-Parallelization', 'Unncessary locks', 'Unncessary strong memory consistency', 'Lock management overhead', 'Unnecessary synchronization', 'Unnecessary process communiction', 'Unnecessary operation/traversal/function call', 'Redundant operation', 'Expensive operation', 'Frequent  function call', 'Inefficient data-structure library', 'Usage of improper data type', 'memory leak', 'repreated memory allocation', 'Redundant memory allocation', 'Slower memory allocation library call', 'Insufficient memory', 'unnecessary data copy', 'sequential I/O operation', 'over parallelization', 'boundary condition check', 'Unintentional Programming logic error', 'Inefficiency due to new compiler version '] and return an answer with the following format and this format only, don't provide explanation: Type: classified_type."}, {"role": "user", "content": "/*******************************************************\n * Copyright (c) 2014, ArrayFire\n * All rights reserved.\n *\n * This file is distributed under 3-clause BSD license.\n * The complete license agreement can be obtained at:\n * http://arrayfire.com/licenses/BSD-3-Clause\n ********************************************************/\n\n#include <Array.hpp>\n#include <err_cuda.hpp>\n#include <fast_pyramid.hpp>\n#include <kernel/orb.hpp>\n#include <kernel/orb_patch.hpp>\n#include <af/dim4.hpp>\n\nusing af::dim4;\n\nnamespace cuda {\n\ntemplate<typename T, typename convAccT>\nunsigned orb(Array<float> &x, Array<float> &y, Array<float> &score,\n             Array<float> &ori, Array<float> &size, Array<uint> &desc,\n             const Array<T> &image, const float fast_thr,\n             const unsigned max_feat, const float scl_fctr,\n             const unsigned levels, const bool blur_img) {\n    std::vector<unsigned> feat_pyr, lvl_best;\n    std::vector<float> lvl_scl;\n    std::vector<Array<float>> x_pyr, y_pyr;\n    std::vector<Array<T>> img_pyr;\n\n    fast_pyramid<T>(feat_pyr, x_pyr, y_pyr, lvl_best, lvl_scl, img_pyr, image,\n                    fast_thr, max_feat, scl_fctr, levels, REF_PAT_SIZE);\n\n    const size_t num_levels = feat_pyr.size();\n\n    std::vector<float *> d_x_pyr(num_levels, nullptr),\n        d_y_pyr(num_levels, nullptr);\n\n    for (size_t i = 0; i < feat_pyr.size(); ++i) {\n        if (feat_pyr[i] > 0) {\n            d_x_pyr[i] = static_cast<float *>(x_pyr[i].get());\n            d_y_pyr[i] = static_cast<float *>(y_pyr[i].get());\n        }\n    }\n\n    unsigned nfeat_out;\n    float *x_out;\n    float *y_out;\n    float *score_out;\n    float *orientation_out;\n    float *size_out;\n    unsigned *desc_out;\n\n    kernel::orb<T, convAccT>(&nfeat_out, &x_out, &y_out, &score_out,\n                             &orientation_out, &size_out, &desc_out, feat_pyr,\n                             d_x_pyr, d_y_pyr, lvl_best, lvl_scl, img_pyr,\n                             fast_thr, max_feat, scl_fctr, levels, blur_img);\n\n    if (nfeat_out > 0) {\n        if (x_out == NULL || y_out == NULL || score_out == NULL ||\n            orientation_out == NULL || size_out == NULL || desc_out == NULL) {\n            AF_ERROR(\"orb_descriptor: feature array is null.\", AF_ERR_SIZE);\n        }\n\n        const dim4 feat_dims(nfeat_out);\n        const dim4 desc_dims(8, nfeat_out);\n\n        x     = createDeviceDataArray<float>(feat_dims, x_out);\n        y     = createDeviceDataArray<float>(feat_dims, y_out);\n        score = createDeviceDataArray<float>(feat_dims, score_out);\n        ori   = createDeviceDataArray<float>(feat_dims, orientation_out);\n        size  = createDeviceDataArray<float>(feat_dims, size_out);\n        desc  = createDeviceDataArray<unsigned>(desc_dims, desc_out);\n    }\n\n    return nfeat_out;\n}\n\n#define INSTANTIATE(T, convAccT)                                              \\\n    template unsigned orb<T, convAccT>(                                       \\\n        Array<float> & x, Array<float> & y, Array<float> & score,             \\\n        Array<float> & ori, Array<float> & size, Array<uint> & desc,          \\\n        const Array<T> &image, const float fast_thr, const unsigned max_feat, \\\n        const float scl_fctr, const unsigned levels, const bool blur_img);\n\nINSTANTIATE(float, float)\nINSTANTIATE(double, double)\n\n}  // namespace cuda\n"}, {"role": "assistant", "content": "Type: Insufficient memory."}]}